// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/bayesm.HART.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// breg
vec breg(vec const& y, mat const& X, vec const& betabar, mat const& A);
RcppExport SEXP _bayesm_HART_breg(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(breg(y, X, betabar, A));
    return rcpp_result_gen;
END_RCPP
}
// cpwbart_mnl
Rcpp::NumericMatrix cpwbart_mnl(std::string const& trees, Rcpp::List const& cutpoints, arma::mat const& X);
RcppExport SEXP _bayesm_HART_cpwbart_mnl(SEXP treesSEXP, SEXP cutpointsSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type cutpoints(cutpointsSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cpwbart_mnl(trees, cutpoints, X));
    return rcpp_result_gen;
END_RCPP
}
// llmnl
double llmnl(vec const& beta, vec const& y, mat const& X);
RcppExport SEXP _bayesm_HART_llmnl(SEXP betaSEXP, SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat const& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(llmnl(beta, y, X));
    return rcpp_result_gen;
END_RCPP
}
// lndIWishart
double lndIWishart(double nu, mat const& V, mat const& IW);
RcppExport SEXP _bayesm_HART_lndIWishart(SEXP nuSEXP, SEXP VSEXP, SEXP IWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< mat const& >::type V(VSEXP);
    Rcpp::traits::input_parameter< mat const& >::type IW(IWSEXP);
    rcpp_result_gen = Rcpp::wrap(lndIWishart(nu, V, IW));
    return rcpp_result_gen;
END_RCPP
}
// lndMvn
double lndMvn(vec const& x, vec const& mu, mat const& rooti);
RcppExport SEXP _bayesm_HART_lndMvn(SEXP xSEXP, SEXP muSEXP, SEXP rootiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type rooti(rootiSEXP);
    rcpp_result_gen = Rcpp::wrap(lndMvn(x, mu, rooti));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet
vec rdirichlet(vec const& alpha);
RcppExport SEXP _bayesm_HART_rdirichlet(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet(alpha));
    return rcpp_result_gen;
END_RCPP
}
// llmnl_con
double llmnl_con(vec const& betastar, vec const& y, mat const& X, vec const& SignRes);
RcppExport SEXP _bayesm_HART_llmnl_con(SEXP betastarSEXP, SEXP ySEXP, SEXP XSEXP, SEXP SignResSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const& >::type betastar(betastarSEXP);
    Rcpp::traits::input_parameter< vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec const& >::type SignRes(SignResSEXP);
    rcpp_result_gen = Rcpp::wrap(llmnl_con(betastar, y, X, SignRes));
    return rcpp_result_gen;
END_RCPP
}
// rhierMnlRwMixture_rcpp_loop
List rhierMnlRwMixture_rcpp_loop(List const& lgtdata, mat const& Z, vec const& deltabar, mat const& Ad, mat const& mubar, mat const& Amu, double nu, mat const& V, double s, int R, int keep, int nprint, bool drawdelta, mat olddelta, vec const& a, vec oldprob, mat oldbetas, vec ind, vec const& SignRes, bool useBART, List const& bart_params);
RcppExport SEXP _bayesm_HART_rhierMnlRwMixture_rcpp_loop(SEXP lgtdataSEXP, SEXP ZSEXP, SEXP deltabarSEXP, SEXP AdSEXP, SEXP mubarSEXP, SEXP AmuSEXP, SEXP nuSEXP, SEXP VSEXP, SEXP sSEXP, SEXP RSEXP, SEXP keepSEXP, SEXP nprintSEXP, SEXP drawdeltaSEXP, SEXP olddeltaSEXP, SEXP aSEXP, SEXP oldprobSEXP, SEXP oldbetasSEXP, SEXP indSEXP, SEXP SignResSEXP, SEXP useBARTSEXP, SEXP bart_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type lgtdata(lgtdataSEXP);
    Rcpp::traits::input_parameter< mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< vec const& >::type deltabar(deltabarSEXP);
    Rcpp::traits::input_parameter< mat const& >::type Ad(AdSEXP);
    Rcpp::traits::input_parameter< mat const& >::type mubar(mubarSEXP);
    Rcpp::traits::input_parameter< mat const& >::type Amu(AmuSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< mat const& >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< bool >::type drawdelta(drawdeltaSEXP);
    Rcpp::traits::input_parameter< mat >::type olddelta(olddeltaSEXP);
    Rcpp::traits::input_parameter< vec const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< vec >::type oldprob(oldprobSEXP);
    Rcpp::traits::input_parameter< mat >::type oldbetas(oldbetasSEXP);
    Rcpp::traits::input_parameter< vec >::type ind(indSEXP);
    Rcpp::traits::input_parameter< vec const& >::type SignRes(SignResSEXP);
    Rcpp::traits::input_parameter< bool >::type useBART(useBARTSEXP);
    Rcpp::traits::input_parameter< List const& >::type bart_params(bart_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(rhierMnlRwMixture_rcpp_loop(lgtdata, Z, deltabar, Ad, mubar, Amu, nu, V, s, R, keep, nprint, drawdelta, olddelta, a, oldprob, oldbetas, ind, SignRes, useBART, bart_params));
    return rcpp_result_gen;
END_RCPP
}
// rmixGibbs
List rmixGibbs(mat const& y, mat const& Bbar, mat const& A, double nu, mat const& V, vec const& a, vec const& p, vec const& z);
RcppExport SEXP _bayesm_HART_rmixGibbs(SEXP ySEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP, SEXP aSEXP, SEXP pSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat const& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< mat const& >::type V(VSEXP);
    Rcpp::traits::input_parameter< vec const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< vec const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< vec const& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(rmixGibbs(y, Bbar, A, nu, V, a, p, z));
    return rcpp_result_gen;
END_RCPP
}
// rmixture
List rmixture(int n, vec pvec, List comps);
RcppExport SEXP _bayesm_HART_rmixture(SEXP nSEXP, SEXP pvecSEXP, SEXP compsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< List >::type comps(compsSEXP);
    rcpp_result_gen = Rcpp::wrap(rmixture(n, pvec, comps));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg
List rmultireg(mat const& Y, mat const& X, mat const& Bbar, mat const& A, double nu, mat const& V);
RcppExport SEXP _bayesm_HART_rmultireg(SEXP YSEXP, SEXP XSEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat const& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< mat const& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultireg(Y, X, Bbar, A, nu, V));
    return rcpp_result_gen;
END_RCPP
}
// rtrun
NumericVector rtrun(NumericVector const& mu, NumericVector const& sigma, NumericVector const& a, NumericVector const& b);
RcppExport SEXP _bayesm_HART_rtrun(SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector const& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rtrun(mu, sigma, a, b));
    return rcpp_result_gen;
END_RCPP
}
// rwishart
List rwishart(double nu, mat const& V);
RcppExport SEXP _bayesm_HART_rwishart(SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< mat const& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rwishart(nu, V));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP cpwbart(void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_bayesm_HART_breg", (DL_FUNC) &_bayesm_HART_breg, 4},
    {"_bayesm_HART_cpwbart_mnl", (DL_FUNC) &_bayesm_HART_cpwbart_mnl, 3},
    {"_bayesm_HART_llmnl", (DL_FUNC) &_bayesm_HART_llmnl, 3},
    {"_bayesm_HART_lndIWishart", (DL_FUNC) &_bayesm_HART_lndIWishart, 3},
    {"_bayesm_HART_lndMvn", (DL_FUNC) &_bayesm_HART_lndMvn, 3},
    {"_bayesm_HART_rdirichlet", (DL_FUNC) &_bayesm_HART_rdirichlet, 1},
    {"_bayesm_HART_llmnl_con", (DL_FUNC) &_bayesm_HART_llmnl_con, 4},
    {"_bayesm_HART_rhierMnlRwMixture_rcpp_loop", (DL_FUNC) &_bayesm_HART_rhierMnlRwMixture_rcpp_loop, 21},
    {"_bayesm_HART_rmixGibbs", (DL_FUNC) &_bayesm_HART_rmixGibbs, 8},
    {"_bayesm_HART_rmixture", (DL_FUNC) &_bayesm_HART_rmixture, 3},
    {"_bayesm_HART_rmultireg", (DL_FUNC) &_bayesm_HART_rmultireg, 6},
    {"_bayesm_HART_rtrun", (DL_FUNC) &_bayesm_HART_rtrun, 4},
    {"_bayesm_HART_rwishart", (DL_FUNC) &_bayesm_HART_rwishart, 2},
    {"cpwbart", (DL_FUNC) &cpwbart, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesm_HART(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
