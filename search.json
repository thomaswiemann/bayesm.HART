[{"path":"https://thomaswieman.com/bayesm.HART/articles/bayesm-HART.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"vignette illustrates estimate hierarchical logit model HART priors using bayesm.HART package. Following Application Wiemann (2025), HART logit model applied bank conjoint dataset Allenby Ginter (1995) --state credit card design. key feature bayesm.HART package use Hierarchical Additive Regression Tree (HART) prior. allows flexible, non-parametric specification representative consumer function observed characteristics. vignette contrasts HART logit model conventional hierarchical logit model specifies representative consumer linear function characteristics. rest vignette proceeds follows: 1. Load prepare data use bayesm bayesm.HART 2. Run MCMC chains fully Bayesian inference 3. Posterior inference respondent-level part-worths 4. Posterior inference consumer segment part-worths","code":""},{"path":"https://thomaswieman.com/bayesm.HART/articles/bayesm-HART.html","id":"conjoint-data-of-allenby-and-ginter-1995","dir":"Articles","previous_headings":"","what":"Conjoint Data of Allenby and Ginter (1995)","title":"Get Started","text":"illustrate HART logit model, load bank dataset included bayesm package originally considered Allenby Ginter (1995). dataset contains responses 946 customers regional bank collected telephone conjoint credit card attributes. bank’s main motivation stemmed effort expand customers new market (“--state”). respondent offered 13 17 responses hypothetical choices two credit cards identical considered attributes except two varied. total, dataset contains 14,799 binary responses well respondents’ age, income, gender. code snippet prepares data use bayesm bayesm.HART. packages take data structure, allowing researchers familiar bayesm package get started quickly.","code":"# Load dependencies library(bayesm.HART) library(bayesm) # Data wrangling and plotting utilities library(tidyr) library(dplyr) library(ggplot2)  # Load and prepare data from the 'bank' dataset (same as bayesm) data(bank) choiceAtt <- bank$choiceAtt hh <- levels(factor(choiceAtt$id)) nhh <- length(hh) lgtdata <- vector(\"list\", length = nhh) for (i in 1:nhh) {     y = 2 - choiceAtt[choiceAtt[,1]==hh[i], 2]     nobs = length(y)     X_temp = as.matrix(choiceAtt[choiceAtt[,1]==hh[i], c(3:16)])     X = matrix(0, nrow = nrow(X_temp) * 2, ncol = ncol(X_temp))     X[seq(1, nrow(X), by = 2), ] = X_temp     lgtdata[[i]] = list(y=y, X=X) } Z <- as.matrix(bank$demo[, -1]) # omit id Z <- t(t(Z) - colMeans(Z)) # de-mean covariates as required by bayesm  # Final data object (same as bayesm) Data <- list(lgtdata = lgtdata, Z = Z, p = 2)"},{"path":"https://thomaswieman.com/bayesm.HART/articles/bayesm-HART.html","id":"mcmc-estimation","dir":"Articles","previous_headings":"","what":"MCMC Estimation","title":"Get Started","text":"apply two demand models conjoint data: HART logit model proposed Wiemann (2025) conventional linear hierarchical logit model (e.g., Rossi et al., 2009). models motivated latent utility model consumer choice, respondent chooses credit card profile maximizes utility. difference HART linear hierarchical specifications model preference heterogeneity. linear approach models relationship respondent’s characteristics linear function Δ⊤Zi\\Delta^\\top Z_i HART model uses sum--trees factor model Δ(Zi)\\Delta(Z_i) allows rich nonlinearities interactions. code snippet specifies MCMC hyperparameters. speed code runtime, short MCMC chain 5000 iterations considered. Longer chains run practice. sample posterior distribution models calling rhierMnlRwMixture. difference syntax additional prior argument bart. simplicity, code specifies HART model 20 trees per factor, leaving hyperparameters defaults. See also ?rhierMnlRwMixture details. simple way check convergence plot log-likelihood MCMC iterations. plot indicates convergence MCMC chains within just iterations. MCMC Traceplot Log Likelihood.","code":"burnin_draws <- ceiling(burn / keep)   mcmc_data <- data.frame(   Iteration = (1:length(out_hart$loglike)) * keep,   HART = out_hart$loglike,   Linear = out_lin$loglike ) %>%    pivot_longer(cols = c(\"HART\", \"Linear\"), names_to = \"Model\", values_to = \"LogLikelihood\")  ggplot(mcmc_data, aes(x = Iteration, y = LogLikelihood, color = Model)) +   geom_line(alpha = 0.8) +   geom_vline(xintercept = burn, linetype = \"dashed\", color = \"black\") +   scale_color_manual(values = c(\"HART\" = \"blue\", \"Linear\" = \"red\")) +   theme_classic(base_size = 16) +   labs(title = \"Log-Likelihood Trace Plots\", x = \"MCMC Iteration\", y = \"Log-Likelihood\") +   theme(legend.title = element_blank(),          legend.position = \"bottom\",         legend.text = element_text(size = 16))"},{"path":"https://thomaswieman.com/bayesm.HART/articles/bayesm-HART.html","id":"posterior-inference-about-respondent-level-part-worths","dir":"Articles","previous_headings":"","what":"Posterior Inference about Respondent-level Part-Worths","title":"Get Started","text":"MCMC draws models, can characterize posterior estimates individual-level coefficients, part-worths. coefficients represent respondent-specific preferences credit card attribute. illustrate differences HART linear hierarchical approaches, examine posterior distributions two respondents: Respondent 146 older woman low income, respondent 580 middle-aged man moderate income. comparison focuses --state bank attribute, represents key design challenge bank’s expansion strategy. Posterior Distributions Individual-level Part-Worths. posterior distributions show models produce similar individual-level part-worth estimates two respondents. similarity expected reflects key feature hierarchical models: respondents many choice profiles (case ), individual-level posterior estimates primarily driven choice data rather first-stage prior. respondents 13 17 choice profiles, providing substantial individual-level information dominates influence first-stage prior specification. real differences HART linear hierarchical models emerge settings limited individual-level data, characterizing representative consumer new segments—precisely scenario central interest bank’s expansion plans Allenby Ginter (1995). next section explores differences examining representative consumer estimates.","code":"selected_resp <- c(146, 580) coef_indx <- 10 # \"Interest\" coefficient coef_name <- colnames(bank$choiceAtt[, 3:16])[coef_indx]  # Create a combined factor for filling histograms beta_draws <- bind_rows(   as.data.frame(t(out_hart$betadraw[selected_resp, coef_indx, -c(1:burnin_draws)])) %>%      mutate(Model = \"HART\", Draw = row_number()),   as.data.frame(t(out_lin$betadraw[selected_resp, coef_indx, -c(1:burnin_draws)])) %>%      mutate(Model = \"Linear\", Draw = row_number()) ) colnames(beta_draws)[1:2] <- paste(\"Respondent\", selected_resp)  beta_draws_long <- beta_draws %>%   pivot_longer(     cols = starts_with(\"Respondent\"),      names_to = \"Respondent\",      values_to = \"Coefficient\"   ) %>%    mutate(       Model = factor(Model, levels = c(\"Linear\", \"HART\")), # Control facet order       Group = interaction(Respondent, Model)   )  # Define colors model_fills <- c(     \"Respondent 146.Linear\" = \"lightcoral\", \"Respondent 580.Linear\" = \"darkred\",     \"Respondent 146.HART\" = \"lightblue\", \"Respondent 580.HART\" = \"darkblue\" ) model_colors <- c(     \"Respondent 146.Linear\" = \"red\", \"Respondent 580.Linear\" = \"darkred\",     \"Respondent 146.HART\" = \"blue\", \"Respondent 580.HART\" = \"darkblue\" )  # Calculate means means <- beta_draws_long %>%   group_by(Group, Model) %>%   summarise(mean_val = mean(Coefficient), .groups = \"drop\")  ggplot(beta_draws_long, aes(x = Coefficient, fill = Group)) +   geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 45,                   position = \"identity\", color = \"black\", linewidth = 0.3) +   geom_vline(data = means, aes(xintercept = mean_val, color = Group),              linetype = \"dashed\", linewidth = 1.2) +   facet_wrap(~Model) +   scale_fill_manual(name = \"Respondent\", values = model_fills,                     breaks = c(\"Respondent 146.Linear\", \"Respondent 580.Linear\",                                 \"Respondent 146.HART\", \"Respondent 580.HART\"),                     labels = c(\"Respondent 146\", \"Respondent 580\",                                 \"Respondent 146\", \"Respondent 580\")) +   scale_color_manual(values = model_colors, guide = \"none\") +   theme_classic(base_size = 16) +   theme(axis.title = element_text(size = 18), legend.position = \"top\",         legend.title = element_blank(),         strip.text = element_text(size = 16, face = \"bold\"),         strip.background = element_rect(fill = \"grey90\", color = \"black\")) +     labs(title = paste(\"Selected Posterior Distributions of Individual Out-of-State Part-Worths\"),     x = \"Coefficient Value\", y = \"Density\") # Extract posterior draws for the selected respondents and coefficient hart_draws_146 <- out_hart$betadraw[146, coef_indx, -c(1:burnin_draws)] hart_draws_580 <- out_hart$betadraw[580, coef_indx, -c(1:burnin_draws)] lin_draws_146 <- out_lin$betadraw[146, coef_indx, -c(1:burnin_draws)] lin_draws_580 <- out_lin$betadraw[580, coef_indx, -c(1:burnin_draws)]  # Create summary table summary_results <- data.frame(   Model = c(\"Linear\", \"Linear\", \"HART\", \"HART\"),   Respondent = c(\"146\", \"580\", \"146\", \"580\"),   Mean = c(mean(lin_draws_146), mean(lin_draws_580),             mean(hart_draws_146), mean(hart_draws_580)),   SD = c(sd(lin_draws_146), sd(lin_draws_580),           sd(hart_draws_146), sd(hart_draws_580)) )  print(summary_results, digits = 3) #>    Model Respondent   Mean   SD #> 1 Linear        146 -7.293 2.88 #> 2 Linear        580 -1.432 2.52 #> 3   HART        146 -8.194 2.75 #> 4   HART        580 -0.511 2.72"},{"path":"https://thomaswieman.com/bayesm.HART/articles/bayesm-HART.html","id":"posterior-inference-on-consumer-segment-part-worths","dir":"Articles","previous_headings":"","what":"Posterior Inference on Consumer Segment Part-Worths","title":"Get Started","text":"established previous section, real differences HART linear hierarchical models emerge characterizing representative consumer new segments—precisely scenario central interest bank’s expansion plans. model estimates part-worths vary demographics Z, term Delta(Z) represents expected part-worth “representative” respondent characteristics Z. illustrate differences, focus two granularly-defined consumer segments. Segment 1 defined older female respondents low income, Segment 2 defined middle-aged male respondents moderate income. segments selected allow illustration substantial differences conventional linear HART logit models. can use predict function get posterior draws Delta(Z) selected segments. Posterior Distributions Expected Part-Worths. posterior distributions reveal economically important differences HART linear hierarchical approaches. conventional linear approach finds moderate differences expected part-worths two segments. stark contrast, HART finds substantially different preferences two segments. linear specification averages nonlinearities interactions, HART model captures richer heterogeneity. enhanced ability differentiate consumer segments represents key advantage HART approach granular understanding preference heterogeneity required targeting new market segments.","code":"# We predict for all respondents DeltaZ_hat_hart <- predict(out_hart, newdata = Data, type = \"DeltaZ+mu\", burn = burn) #> Predicting coefficient 1 with BART model #> Predicting coefficient 2 with BART model #> Predicting coefficient 3 with BART model #> Predicting coefficient 4 with BART model #> Predicting coefficient 5 with BART model #> Predicting coefficient 6 with BART model #> Predicting coefficient 7 with BART model #> Predicting coefficient 8 with BART model #> Predicting coefficient 9 with BART model #> Predicting coefficient 10 with BART model #> Predicting coefficient 11 with BART model #> Predicting coefficient 12 with BART model #> Predicting coefficient 13 with BART model #> Predicting coefficient 14 with BART model class(out_lin) <- \"rhierMnlRwMixture\" # allows bayesm model to use bayesm.HART methods  DeltaZ_hat_lin <- predict(out_lin, newdata = Data, type = \"DeltaZ+mu\", burn = burn) deltaZ_draws <- bind_rows(   as.data.frame(t(DeltaZ_hat_hart[selected_resp, coef_indx, ])) %>%      mutate(Model = \"HART\", Draw = row_number()),   as.data.frame(t(DeltaZ_hat_lin[selected_resp, coef_indx, ])) %>%      mutate(Model = \"Linear\", Draw = row_number()) ) colnames(deltaZ_draws)[1:2] <- c(\"Segment 1\", \"Segment 2\")  deltaZ_draws_long <- deltaZ_draws %>%   pivot_longer(     cols = starts_with(\"Segment\"),      names_to = \"Consumer_Segment\",      values_to = \"Coefficient\"   ) %>%    mutate(       Model = factor(Model, levels = c(\"Linear\", \"HART\")), # Control facet order       Group = interaction(Consumer_Segment, Model)   )    # Update color definitions to match segment terminology model_fills <- c(     \"Segment 1.Linear\" = \"lightcoral\", \"Segment 2.Linear\" = \"darkred\",     \"Segment 1.HART\" = \"lightblue\", \"Segment 2.HART\" = \"darkblue\" ) model_colors <- c(     \"Segment 1.Linear\" = \"red\", \"Segment 2.Linear\" = \"darkred\",     \"Segment 1.HART\" = \"blue\", \"Segment 2.HART\" = \"darkblue\" )  # Calculate means means_deltaZ <- deltaZ_draws_long %>%   group_by(Group, Model) %>%   summarise(mean_val = mean(Coefficient), .groups = \"drop\")  ggplot(deltaZ_draws_long, aes(x = Coefficient, fill = Group)) +   geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 45,                   position = \"identity\", color = \"black\", linewidth = 0.3) +   geom_vline(data = means_deltaZ, aes(xintercept = mean_val, color = Group),              linetype = \"dashed\", linewidth = 1.2) +   facet_wrap(~Model) +   scale_fill_manual(name = \"Consumer Segment\", values = model_fills,                     breaks = c(\"Segment 1.Linear\", \"Segment 2.Linear\",                                 \"Segment 1.HART\", \"Segment 2.HART\"),                     labels = c(\"Segment 1\", \"Segment 2\",                                 \"Segment 1\", \"Segment 2\")) +   scale_color_manual(values = model_colors, guide = \"none\") +   theme_classic(base_size = 16) +   theme(axis.title = element_text(size = 18), legend.position = \"top\",         legend.title = element_blank(),         strip.text = element_text(size = 16, face = \"bold\"),         strip.background = element_rect(fill = \"grey90\", color = \"black\")) +          labs(title = \"Posterior Distributions of Expected Out-of-State Part-Worths\",      x = \"Coefficient Value\", y = \"Density\") # Extract expected part-worths for the two segments deltaZ_summary <- data.frame(   Segment = c(\"Segment 1 (Older Women, Low Income)\",                \"Segment 2 (Middle-aged Men, Moderate Income)\"),   Linear_Mean = c(mean(DeltaZ_hat_lin[146, coef_indx, ]),                    mean(DeltaZ_hat_lin[580, coef_indx, ])),   Linear_SD = c(sd(DeltaZ_hat_lin[146, coef_indx, ]),                  sd(DeltaZ_hat_lin[580, coef_indx, ])),   HART_Mean = c(mean(DeltaZ_hat_hart[146, coef_indx, ]),                  mean(DeltaZ_hat_hart[580, coef_indx, ])),   HART_SD = c(sd(DeltaZ_hat_hart[146, coef_indx, ]),                sd(DeltaZ_hat_hart[580, coef_indx, ])) )  print(deltaZ_summary, digits = 3) #>                                        Segment Linear_Mean Linear_SD #> 1          Segment 1 (Older Women, Low Income)       -3.90     0.637 #> 2 Segment 2 (Middle-aged Men, Moderate Income)       -3.74     0.425 #>   HART_Mean HART_SD #> 1     -5.38   0.976 #> 2     -2.86   0.624  # Calculate differences between segments cat(\"\\nDifferences between segments:\\n\") #>  #> Differences between segments: cat(\"Linear approach difference:\",      deltaZ_summary$Linear_Mean[2] - deltaZ_summary$Linear_Mean[1], \"\\n\") #> Linear approach difference: 0.1555552 cat(\"HART approach difference:\",      deltaZ_summary$HART_Mean[2] - deltaZ_summary$HART_Mean[1], \"\\n\") #> HART approach difference: 2.520084"},{"path":"https://thomaswieman.com/bayesm.HART/articles/bayesm-HART.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get Started","text":"Allenby, Greg M. James L. Ginter (1995). “Using Extremes Design Products Segment Markets.” Journal Marketing Research 32.4, pp. 392–403. Rossi, Peter E., Greg M. Allenby, Robert McCulloch (2009). Bayesian Statistics Marketing. Reprint. Wiley Series Probability Statistics. Chichester: Wiley. Wiemann, Thomas (2025). “Personalization HART.” Working paper.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Wiemann. Author, maintainer.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wiemann T (2025). bayesm.HART: Bayesian Multinomial Logit Models HART Priors. R package version 0.0.0.9000.","code":"@Manual{,   title = {bayesm.HART: Bayesian Multinomial Logit Models with HART Priors},   author = {Thomas Wiemann},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"bayesmhart","dir":"","previous_headings":"","what":"Bayesian Multinomial Logit Models with HART Priors","title":"Bayesian Multinomial Logit Models with HART Priors","text":"bayesm.HART implements MCMC sampling routine Hierarchical Additive Regression Trees (HART) logit model proposed Wiemann (2025). HART logit model flexibly leverages potentially many observed consumer characteristics thus generalizes existing hierarchical models exclusively model representative consumer linear function select characteristics. HART’s combination flexible nonparametric prior within hierarchical model provides coherent framework (Bayes-) optimal managerial decisions adapt firm’s familiarity consumer: first, HART flexibly leverages observed characteristics granular predictions new consumers; second, individual-level preference estimates adapt optimally consumer’s choices accumulate. See corresponding working paper Personalization HART discussion details. bayesm.HART package builds excellent (highly popular) bayesm BART packages. syntax estimating HART logit model mirrors syntax bayesm package. Researchers existing bayesm code need adapt Prior argument get started–see code snippet .","code":""},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Multinomial Logit Models with HART Priors","text":"Install latest development version GitHub (requires devtools package):","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"thomaswiemann/bayesm.HART\", dependencies = TRUE)"},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bayesian Multinomial Logit Models with HART Priors","text":"following example applies HART logit model canonical conjoint dataset Allenby Ginter (1995) credit card design. first code block loads data formats list structure required rhierMnlRwMixture. also specifies MCMC hyperparameters. syntax codeblock identical bayesm bayesm.HART packages. fit HART logit model using Metropolis-within-Gibbs sampler, call rhierMnlRwMixture routine. key difference conventional calls linear hierarchical specifications based bayesm use additional Prior argument bart. simplicity, code specifies HART model 50 trees per factor, leaving hyperparameters defaults. See also ?rhierMnlRwMixture details. MCMC draws fitted model, can characterize posterior estimates quantity interest. key object representative respondent, represents expected part-worths respondent conditional characteristics. following code computes posterior mean standard deviation expected part-worths three credit card attributes.","code":"# Load bayesm.HART for the sampler; load bayesm for the bank data library(bayesm.HART) library(bayesm)  # Load and prepare data from the 'bank' dataset (same as bayesm) data(bank) choiceAtt <- bank$choiceAtt hh <- levels(factor(choiceAtt$id)) nhh <- length(hh) lgtdata <- vector(\"list\", length = nhh) for (i in 1:nhh) {     y = 2 - choiceAtt[choiceAtt[,1]==hh[i], 2]     nobs = length(y)     X_temp = as.matrix(choiceAtt[choiceAtt[,1]==hh[i], c(3:16)])     X = matrix(0, nrow = nrow(X_temp) * 2, ncol = ncol(X_temp))     X[seq(1, nrow(X), by = 2), ] = X_temp     lgtdata[[i]] = list(y=y, X=X) } Z <- as.matrix(bank$demo[, -1]) # omit id Z <- t(t(Z) - colMeans(Z)) # de-mean covariates as required by bayesm  # Final data object (same as bayesm) Data <- list(lgtdata = lgtdata, Z = Z, p = 2)  # MCMC hyperparameters (same as bayesm) Mcmc <- list(R = 2000, keep = 2, nprint = 500) # Fit the HART logit model out <- bayesm.HART::rhierMnlRwMixture(     Data = Data, Mcmc = Mcmc,      Prior = list(       ncomp = 1,        bart = list(num_trees = 50) # new HART prior parameters       ),     r_verbose = F # suppress R print output (optional) ) #>  MCMC Iteration (est time to end - min)  #>  500 (0.9) #>  1000 (0.6) #>  1500 (0.3) #>  2000 (0.0) #>  Total Time Elapsed: 1.32 DeltaZ_hat <- predict(out, newdata = Data, type = \"DeltaZ+mu\",                        burn = 250, r_verbose=F)  posterior_mean <- apply(DeltaZ_hat, 2, mean) posterior_sd <- apply(DeltaZ_hat, 2, sd)  # Indices for the desired coefficients: # 2: Interest Low Fixed # 8: Annual Fee Low # 10: Bank Out-of-State selected_indices <- c(2, 8, 10)  # Create a matrix with means and sds as rows results_matrix <- rbind(   `Posterior Mean` = posterior_mean[selected_indices],   `Posterior SD`   = posterior_sd[selected_indices] )  # Convert to a data frame and set column names results_df <- as.data.frame(results_matrix) colnames(results_df) <- c(\"Interest Low Fixed\", \"Annual Fee Low\", \"Bank Out-of-State\")  # Print the data frame to the console print(results_df, digits = 3) #>                Interest Low Fixed Annual Fee Low Bank Out-of-State #> Posterior Mean               5.08           4.33            -3.411 #> Posterior SD                 0.96           0.99             0.993"},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"learn-more-about-bayesmhart","dir":"","previous_headings":"","what":"Learn More about bayesm.HART","title":"Bayesian Multinomial Logit Models with HART Priors","text":"Curious want learn ? look bayesm.HART vignettes: vignette(\"bayesm-HART\") provides detailed introduction … come soon!","code":""},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Bayesian Multinomial Logit Models with HART Priors","text":"bayesm.HART originated fork bayesm BART packages. current implementation heavily leverages codebase foundational work packages. gratefully acknowledge contributions respective authors: bayesm: Peter Rossi BART: Robert McCulloch, Rodney Sparapani, Robert Gramacy, Matthew Pratola, Charles Spanbauer, Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines","code":""},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian Multinomial Logit Models with HART Priors","text":"Allenby, Greg M. James L. Ginter (1995). “Using Extremes Design Products Segment Markets.” Journal Marketing Research 32.4, pp. 392–403. Chipman, Hugh ., Edward . George, Robert E. McCulloch (2010). “BART: Bayesian Additive Regression Trees.” Annals Applied Statistics 4.1. Rossi, Peter E., Greg M. Allenby, Robert McCulloch (2009). Bayesian Statistics Marketing. Reprint. Wiley Series Probability Statistics. Chichester: Wiley. Rossi, Peter (2023). bayesm: Bayesian Inference Marketing/Micro-Econometrics. Comprehensive R Archive Network. Sparapani, Rodney, Charles Spanbauer, Robert McCulloch (2021). “Nonparametric Machine Learning Efficient Computation Bayesian Additive Regression Trees: BART R Package.” Journal Statistical Software 97, pp. 1–66. Wiemann, Thomas (2025). “Personalization HART.” Working paper.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/bayesm.HART-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bayesm.HART: Hierarchical Logit Models with Bayesian Additive Regression Trees — bayesm.HART-package","title":"bayesm.HART: Hierarchical Logit Models with Bayesian Additive Regression Trees — bayesm.HART-package","text":"bayesm.HART package provides hierarchical Bayesian machine learning approach personalization. core, package implements Metropolis-within-Gibbs sampler hierarchical logit model Hierarchical Additive Regression Trees (HART) prior. HART nonparametric prior models \"representative consumer\" flexible sum--trees function observed characteristics. extends conventional hierarchical models often limited linear functions characteristics.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/bayesm.HART-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bayesm.HART: Hierarchical Logit Models with Bayesian Additive Regression Trees — bayesm.HART-package","text":"Maintainer: Thomas Wiemann wiemann@uchicago.edu","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Null Coalescing Operator — %||%","title":"Null Coalescing Operator — %||%","text":"Provides default value left-hand side expression evaluates NULL. Similar rlang::%||%.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null Coalescing Operator — %||%","text":"","code":"a %||% b"},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null Coalescing Operator — %||%","text":"expression check. b default value NULL.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null Coalescing Operator — %||%","text":"NULL, otherwise b.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"Computes posterior distribution average marginal effects varying target covariate grid.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"","code":"marginal_effects(object, ...)  # S3 method for class 'rhierMnlRwMixture' marginal_effects(object, z_values, Z, burn = 0, verbose = TRUE, ...)"},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"object fitted rhierMnlRwMixture object. ... Additional arguments (currently ignored). z_values numeric matrix row represents specific grid point evaluation. Columns correspond covariates model's original Z matrix. Non-NA values row fix corresponding covariate value grid point. NA values indicate covariate take value corresponding row base Z matrix provided. Z numeric matrix representing base population context effects averaged. must number columns required model (nz). grid point (row) z_values, counterfactual matrix constructed based Z, average effect across rows counterfactual matrix calculated. burn Integer, number initial MCMC draws discard. verbose Logical, whether print progress messages.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"result depends method implementation. list object class \"marginal_effects\" containing: z_values user-provided matrix grid points used evaluation. avg_betabar_draws list element [[]] ncoef x ndraws_use matrix representing posterior draws average betabar (DeltaZ + mu), evaluated -th grid point (row z_values) averaged rows base Z matrix. call matched call function. burn number burn-draws discarded.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"generic function. main implementation package marginal_effects.rhierMnlRwMixture.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"","code":"# --- Simulate Data (requires bayesm.HART package) --- if (requireNamespace(\"bayesm.HART\", quietly = TRUE)) {   sim_data <- bayesm.HART::sim_hier_mnl(nlgt = 50, nT = 10, p = 3, nz = 3,                                      nXa = 1, nXd = 0, seed = 123)   Data <- list(p = sim_data$p, lgtdata = sim_data$lgtdata, Z = sim_data$Z)   ncoef <- sim_data$true_values$dimensions$ncoef   # --- Fit Model (minimal run for example) ---   # Note: Use much larger R and keep for real analysis!   Prior <- list(ncomp = 1)   Mcmc <- list(R = 100, keep = 1)   # Use try() to avoid errors stopping the example build if model fails   fit <- try(bayesm.HART::rhierMnlRwMixture(Data = Data, Prior = Prior, Mcmc = Mcmc,                                          r_verbose = FALSE), silent = TRUE)   if (!inherits(fit, \"try-error\")) {     # --- Define Grid for Marginal Effects (vary Z1) ---     target_z_index <- 1     grid_z1 <- seq(min(Data$Z[, target_z_index]),                     max(Data$Z[, target_z_index]),                     length.out = 5)     z_grid <- matrix(NA, nrow = length(grid_z1), ncol = ncol(Data$Z))     z_grid[, target_z_index] <- grid_z1     # --- Calculate Marginal Effects ---     mfx_result <- marginal_effects(fit,                                       z_values = z_grid,                                       Z = Data$Z,                                       burn = 20, # Discard first 20 draws                                      verbose = FALSE)     print(names(mfx_result))     print(dim(mfx_result$avg_betabar_draws[[1]])) # Check dimensions     # --- Summarize Effects (see example for summary.marginal_effects) ---      # --- Plot Effects (see example for plot.summary.marginal_effects) ---   } } #>  MCMC Iteration (est time to end - min)  #>  100 (0.0) #>  Total Time Elapsed: 0.00  #> [1] \"z_values\"          \"avg_betabar_draws\" \"call\"              #> [4] \"burn\"              #> [1]  3 80"},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"Creates ggplot visualization summarized marginal effects one summary.marginal_effects objects.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"","code":"# S3 method for class 'summary.marginal_effects' plot(   x,   ...,   coef_index = 1,   ci_level = 0.95,   plot_axis_var = NULL,   xlab = NULL,   ylab = NULL,   title = NULL,   color_values = NULL,   linetype_values = NULL,   fill_values = NULL,   show_legend = TRUE,   x_name = NULL )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"x object class \"summary.marginal_effects\". ... Additional named objects class \"summary.marginal_effects\" plotted alongside x. names used legend. coef_index Integer, index coefficient (beta) plot. Defaults 1. ci_level Numeric (0 < ci_level < 1), credible interval level display ribbon (e.g., 0.95 95% CI). Requires corresponding quantiles (e.g., q2.5 q97.5 q25 q975) present summary_df input object(s). Defaults 0.95. plot_axis_var Character, name column summary_df use x-axis (must one z_val_* columns derived non-NA columns original z_values input marginal_effects). NULL (default), function use first column found x$summary_df matches pattern ^z_val_[0-9]+$. xlab Character, custom label x-axis. NULL (default), label value plot_axis_var. ylab Character, custom label y-axis. Defaults describing mean effect selected coefficient. title Character, custom plot title. NULL (default), title indicate coefficient variable plotted x-axis. color_values Named character vector custom colors (e.g., c(\"Model \" = \"blue\", \"Model B\" = \"red\")). NULL, default ggplot colors used. linetype_values Named character vector custom linetypes (e.g., c(\"Model \" = \"solid\", \"Model B\" = \"dashed\")). NULL, default ggplot linetypes used. fill_values Named character vector custom ribbon fills (e.g., c(\"Model \" = \"blue\", \"Model B\" = \"red\")). NULL, default ggplot fills derived colors used. show_legend Logical, legend displayed? Defaults TRUE. x_name Character, optional name assign primary object x legend. NULL (default), function attempts infer name.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"ggplot object.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"function plots specified coefficient's posterior mean credible interval variable specified plot_axis_var. original marginal_effects call used z_values matrix varied across multiple dimensions (resulting multiple z_val_* columns summary_df), plot show relationship chosen plot_axis_var, overlaying results combinations varying dimensions. instance, z_val_1 z_val_2 exist plot_axis_var = \"z_val_1\", plot show lines distinct value z_val_2 (implicitly, overlaid). visualize effect along one dimension conditional specific values dimensions, filter summary_df within summary.marginal_effects object passing function.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"","code":"# --- Full Example Sequence for Plotting --- # Requires ggplot2 and bayesm.HART if (requireNamespace(\"bayesm.HART\", quietly = TRUE) &&      requireNamespace(\"ggplot2\", quietly = TRUE)) {    # 1. Simulate Data (using a step function for beta_i)   # Define simulation parameters   nlgt_sim <- 200; nT_sim <- 20; p_sim <- 3; nz_sim <- 2   nXa_sim <- 1; nXd_sim <- 0; const_sim <- TRUE   # Calculate expected ncoef based on parameters   ncoef_sim <- const_sim*(p_sim - 1) + (p_sim - 1)*nXd_sim + nXa_sim   # Define arguments for the step function (using defaults from sim_hier_mnl)   step_args_ex <- list(     cutoff = 0,               # Default cutoff     beta_1 = rep(-2, ncoef_sim), # Value above cutoff (default in sim_hier_mnl)     beta_2 = rep(2, ncoef_sim),  # Value below cutoff (default in sim_hier_mnl)     Z_index = 1               # Step based on Z1   )   sim_data <- bayesm.HART::sim_hier_mnl(nlgt = nlgt_sim, nT = nT_sim, p = p_sim, nz = nz_sim,                                     nXa = nXa_sim, nXd = nXd_sim, const = const_sim,                                     seed = 123,                                     beta_func_type = \"step\",                                     beta_func_args = step_args_ex # Pass the full list                                     )   Data <- list(p = sim_data$p, lgtdata = sim_data$lgtdata, Z = sim_data$Z)   # Use actual ncoef from simulation output for consistency   ncoef <- sim_data$true_values$dimensions$ncoef     # 2. Fit Model (minimal run for example)   Prior <- list(ncomp = 1,                 bart = list(num_trees = 10,                             num_cut = 10))   Mcmc <- list(R = 500, keep = 1, nprint = 0)   fit <- try(bayesm.HART::rhierMnlRwMixture(Data = Data, Prior = Prior,                                          Mcmc = Mcmc,                                          r_verbose = FALSE), silent = TRUE)    if (!inherits(fit, \"try-error\")) {     # 3. Define Grid (Vary Z1, which drives the step function)     target_z_index <- 1     grid_z1 <- sort(c(seq(min(Data$Z[, target_z_index]),                             max(Data$Z[, target_z_index]),                             length.out = 6), 0)) # Use more points for step     z_grid <- matrix(NA, nrow = length(grid_z1), ncol = ncol(Data$Z))     z_grid[, target_z_index] <- grid_z1      # 4. Calculate Marginal Effects     mfx_result <- marginal_effects(fit,                                       z_values = z_grid,                                       Z =Data$Z,                                       burn = 200,                                       verbose = FALSE)      # 5. Summarize Marginal Effects     mfx_summary <- summary(mfx_result, probs = c(0.025, 0.5, 0.975))      # 6. Plot the Summary (showing effect of Z1 on coef 1)     # Ensure the axis variable name matches the column in summary_df     plot_var_name <- paste0(\"z_val_\", target_z_index)      try(plot(mfx_summary, coef_index = 1, plot_axis_var = plot_var_name), silent = TRUE)    } else {     message(\"Model fitting failed in example, skipping plotting.\")   } } else {   message(\"Requires bayesm.HART and ggplot2 packages for examples.\") }"},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"Predict Method rhierMnlRwMixture Objects","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"","code":"# S3 method for class 'rhierMnlRwMixture' predict(   object,   newdata = NULL,   type = \"DeltaZ+mu\",   burn = 0,   nsim = 10,   r_verbose = TRUE,   ... )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"object fitted rhierMnlRwMixture object. newdata Optional list containing data prediction. Structure depends type: type %% c(\"DeltaZ\", \"DeltaZ+mu\"): Requires newdata$Z, matrix npred rows prediction units (model fit Z). type = \"posterior_probs\": Requires newdata$nlgtdata, list length nlgt (original number units). element \\\\[[]] must contain $X, design matrix (T_i*p) x nvar unit . Also requires newdata$p, number alternatives. type = \"prior_probs\": Requires newdata$Z (model fit Z, determining npred), newdata$p, newdata$X (list length npred, element \\\\[[]] design matrix (T_i*p) x nvar). type Type prediction: \"DeltaZ\": Expected part-worths representative consumer, \\(\\Delta(Z)\\). \"DeltaZ+mu\": Expected part-worths plus mean unobserved heterogeneity component, \\(\\Delta(Z) + \\mu_j\\). Note: mixtures (ncomp > 1), uses mean \\(\\mu_1\\) first component. \"posterior_probs\": Posterior predictive choice probabilities original estimation units using stored betadraw. \"prior_probs\": Prior predictive choice probabilities new prediction units (based newdata$Z overall mixture Z used). Probabilities averaged nsim draws heterogeneity mixture distribution per posterior draw. burn Integer, number initial MCMC draws discard. nsim Integer, number draws heterogeneity mixture distribution per posterior draw type = \"prior_probs\". r_verbose Logical, print progress updates? ... Additional arguments passed underlying prediction functions (e.g., mc.cores, verbose BART DeltaZ predictions via pwbart).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"Depends type: type %% c(\"DeltaZ\", \"DeltaZ+mu\"): 3D array [npred, nvar, ndraws_out] predicted expected part-worths. type = \"posterior_probs\": List length nlgt. element \\\\[[]] 3D array [T_i, p, ndraws_out] posterior predictive choice probabilities unit . type = \"prior_probs\": List length npred. element \\\\[[]] 3D array [T_i, p, ndraws_out] prior predictive choice probabilities prediction unit .","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"rhierMnlRwMixture implements MCMC algorithm Bayesian multinomial logit model Hierarchical Additive Regression Trees (HART) prior. HART hierarchical nonparametric prior allows flexible modeling representative consumer function potentially many observed characteristics.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"","code":"rhierMnlRwMixture(Data, Prior, Mcmc, r_verbose = TRUE)"},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Data list containing: p: Number choice alternatives (integer). lgtdata: list length nlgt. element lgtdata[[]] must list : y: n_i x 1 vector multinomial outcomes (1 p). X: (n_i * p) x nvar matrix alternative-specific attributes. Z (optional): nlgt x nz matrix observed characteristics unit. contain intercept centered. Prior list containing prior parameters: ncomp: Number mixture components (required). (optional): ncomp x 1 vector Dirichlet prior parameters mixture weights pvec (default: rep(5, ncomp)). deltabar (optional): nz * nvar x 1 prior mean vec(Delta) (default: 0). Ignored HART used. Ad (optional): Prior precision matrix vec(Delta) (default: 0.01 * ). Ignored HART used. mubar (optional): nvar x 1 prior mean vector mixture component means (default: 0 unrestricted, 2 restricted). Amu (optional): Prior precision mixture component means (default: 0.01 unrestricted, 0.1 restricted). nu (optional): Degrees freedom IW prior component Sigma (default: nvar+3 unrestricted, nvar+15 restricted). V (optional): Location matrix IW prior component Sigma (default: nu * scaled based restriction). SignRes (optional): nvar x 1 vector sign restrictions. Must contain values 0, -1, 1. value 0 means restriction, -1 ensures coefficient negative, 1 ensures coefficient positive. example, SignRes = c(0,1,-1) means first coefficient unconstrained, second positive, third negative. Default: rep(0, nvar). bart (optional): List parameters HART prior. specified, models representative consumer \\(\\Delta(Z)\\) scaled sum--trees factor model. See Details. Mcmc list containing MCMC parameters: R: Number MCMC iterations (required). keep (optional): Thinning parameter (default: 1). nprint (optional): Print progress every nprint draws (default: 100, 0 none). s (optional): RW Metropolis scaling parameter (default: 2.93 / sqrt(nvar)). w (optional): Fractional likelihood weighting parameter (default: 0.1). r_verbose Logical. Print startup messages? Default TRUE.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"list containing: Deltadraw: Z provided bart=NULL, (R/keep) x (nz * nvar) matrix vec(Delta) draws. betadraw: nlgt x nvar x (R/keep) array unit-level beta_i draws. nmix: List containing mixture draws components: probdraw: (R/keep) x ncomp matrix mixture component probabilities. zdraw: (R/keep) x nlgt matrix component assignments unit. compdraw: (R/keep) list ncomp lists. compdraw[[r]][[j]] = list(mu, rooti) contains draw \\(\\mu_j\\) \\(\\Sigma_j^{-1/2}\\) component j kept draw r. loglike: (R/keep) x 1 vector log-likelihood values kept draws. SignRes: nvar x 1 vector sign restrictions used. bart_trees: HART used, list containing tree structures related parameters.","code":""},{"path":[]},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"model-specification","dir":"Reference","previous_headings":"","what":"Model Specification","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"\\(y_i \\sim MNL(X_i, \\beta_i)\\) unit \\(= 1, ..., nlgt\\). unit-level coefficients (part-worths) \\(\\beta_i\\) modeled : $$\\beta_i = \\Delta(Z_i) + u_i$$ \\(\\Delta(Z_i)\\) representative consumer component, depends observed characteristics \\(Z_i\\), \\(u_i\\) unobserved heterogeneity component. representative consumer component specified : Z provided Prior$bart NULL: \\(\\Delta(Z_i) = Z_i \\Delta\\) \\(\\Delta\\) nz x nvar matrix (linear hierarchical model). Z provided Prior$bart list: \\(\\Delta(Z_i)\\) modeled HART prior (scaled sum--trees factor model). Z NULL: \\(\\Delta(Z_i) = 0\\). ncomp = 1 (currently required), unobserved heterogeneity component follows: $$u_i \\sim N(\\mu_1, \\Sigma_1)$$","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"prior-specifications","dir":"Reference","previous_headings":"","what":"Prior Specifications","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Mixture weights: \\(pvec \\sim Dirichlet()\\) Linear model: \\(\\delta = vec(\\Delta) \\sim N(deltabar, A_d^{-1})\\) Mixture component means: \\(\\mu_j \\sim N(mubar, \\Sigma_j \\otimes Amu^{-1})\\) (covariance scaled \\(\\Sigma_j\\)) Mixture component covariance: \\(\\Sigma_j \\sim IW(\\nu, V)\\) HART model: sum--trees prior placed factor scaled sum--trees model (see HART details ).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"hart-prior-details","dir":"Reference","previous_headings":"","what":"HART Prior Details","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Prior$bart list, specifies HART prior representative consumer \\(\\Delta(Z)\\). replaces conventional linear hierarchical specification. HART prior models representative consumer using scaled vector nvar sum--trees models. HART Parameters (defaults used specified Prior$bart): num_trees: Number trees H sum--trees model (default: 200). power, base: Parameters tree structure prior. probability node depth q splitting \\(\\alpha(1+q)^{-\\beta}\\), base=\\(\\alpha\\) power=\\(\\beta\\). Defaults base=0.95, power=2, strongly favors shallow trees. tau: Parameter controlling prior variance terminal leaf coefficients. default \\(\\tau = 1/\\sqrt{H}\\) \\(\\lambda_{dhg} \\sim N(0, \\tau^2)\\) terminal leaf coefficients. numcut: Number grid points proposing splitting rules continuous variables (default: 100). sparse: TRUE, use Dirichlet HART prior induce sparsity variable selection (default: FALSE). Dirichlet HART (sparse = TRUE): Dirichlet HART model augments HART prior induce sparsity variable selection, following Linero (2018). Instead uniform probability selecting splitting variables, selection probabilities \\(\\tau = (\\tau^{(1)}, \\ldots, \\tau^{(K)})\\) given sparse Dirichlet prior: \\((\\tau^{(1)}, \\ldots, \\tau^{(K)}) \\sim Dirichlet(\\theta/K, \\ldots, \\theta/K)\\), K number characteristics. concentration parameter \\(\\theta\\) given hierarchical prior: \\(\\theta/(\\theta+\\rho) \\sim Beta(,b)\\). , b: Shape parameters Beta hyperprior. default (=0.5, b=1) induces sparsity variables high selection probabilities. rho: Parameter influencing sparsity. Default number characteristics K. Reducing rho K encourages greater sparsity. theta: used, sets Dirichlet concentration parameter without additional hyper-prior (default: 0.0). burn: Number internal burn-iterations Dirichlet HART sampler variable selection allowed (default: 100).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"sign-restrictions","dir":"Reference","previous_headings":"","what":"Sign Restrictions","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"SignRes[k] non-zero, k-th coefficient \\(\\beta_{ik}\\) modeled $$\\beta_{ik} = SignRes[k] \\cdot \\exp(\\beta^*_{ik}).$$ betadraw output contains draws \\(\\beta_{ik}\\) (restriction applied). nmix output contains draws unrestricted mixture components. Note: Care taken selecting priors sign restricted coefficients.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Currently, mixture component implemented. Please use ncomp = 1 Prior specification.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Chipman, Hugh ., Edward . George, Robert E. McCulloch (2010). \"BART: Bayesian Additive Regression Trees.\" Annals Applied Statistics 4.1. Linero, Antonio R. (2018). \"Bayesian regression trees high-dimensional prediction variable selection.\" Journal American Statistical Association 113.522, pp. 626-636. Rossi, Peter E., Greg M. Allenby, Robert McCulloch (2009). Bayesian Statistics Marketing. Reprint. Wiley Series Probability Statistics. Chichester: Wiley. Rossi, Peter (2023). bayesm: Bayesian Inference Marketing/Micro-Econometrics. Comprehensive R Archive Network. Wiemann, Thomas (2025). \"Personalization HART.\" Working paper.","code":""},{"path":[]},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Peter Rossi (original bayesm code), Thomas Wiemann (HART modifications).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"Generates simulated data suitable testing hierarchical multinomial logit models, particularly involving individual-specific covariates (Z) influencing coefficients (beta_i). Supports various functional forms Z-beta relationship mixture models residual heterogeneity.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"","code":"sim_hier_mnl(   nlgt = 300,   nT = 10,   p = 3,   nz = 5,   nXa = 2,   nXd = 1,   const = TRUE,   z_dist_func = function(n, d) matrix(stats::runif(n * d, -1, 1), n, d),   standardize_Z = TRUE,   beta_func_type = \"linear\",   beta_func_args = list(),   ncomp = 1,   mixture_comps = NULL,   sigma_inv_diag = 1,   Xa_dist_func = function(n, p, na) matrix(stats::runif(n * p * na, -1, 1), ncol = p *     na),   Xd_dist_func = function(n, nd) matrix(stats::rnorm(n * nd), ncol = nd),   seed = NULL )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"nlgt Integer. Number individuals cross-sectional units. nT Integer. Number choice observations per individual. p Integer. Number choice alternatives (including outside option ). nz Integer. Number demographic/individual-specific variables Z. nz = 0, Z matrix generated, betabar_true set zero, beta_func_type/beta_func_args ignored. nXa Integer. Number alternative-specific variables X. nXd Integer. Number choice-invariant variables X (e.g., price). const Logical. Include p-1 intercepts model? z_dist_func Function. function generate Z matrix. Must accept arguments n (nlgt) d (nz) return n x d matrix. Default: function(n, d) matrix(runif(n*d, -1, 1), n, d). standardize_Z Logical. Standardize generated Z matrix (mean 0, sd 1)? beta_func_type Character. Specifies functional form mapping Z systematic component beta (betabar_i). Ignored nz = 0. Options: \"linear\": Linear function betabar_i = Z_i %*% Delta. Requires Delta beta_func_args. \"step\": Step function based one Z variable. Requires cutoff, beta_1, beta_2, Z_index beta_func_args. \"friedman\": Friedman benchmark function (modified) based first 5 Z variables. Requires coef_index beta_func_args specify coefficient applies (others zero). \"custom\": user-defined function provided beta_func_args$func. beta_func_args List. Arguments needed chosen beta_func_type. Ignored nz = 0. \"linear\": list(Delta = matrix(runif(ncoef * nz), nrow=nz)). Delta nz x ncoef. \"step\": list(cutoff = 0, beta_1 = rep(-1, ncoef), beta_2 = rep(1, ncoef), Z_index = 1). beta_1/beta_2 vectors length ncoef. Z_index column Z use. \"friedman\": list(coef_index = 1). nz must >= 5. function applied betabar_i[coef_index], others 0. \"custom\": list(func = function(Zi) { ... }). function must take vector Zi (row Z) return vector betabar_i length ncoef. ncomp Integer. Number components normal mixture residual heterogeneity (eps_i). mixture_comps List. Optional pre-specified mixture components. list length ncomp, element list(mu = ..., rooti = ...). mu mean vector (length ncoef), rooti upper Cholesky factor inverse covariance matrix (ncoef x ncoef). NULL, components generated based sigma_inv_diag. sigma_inv_diag Numeric. Diagonal value inverse covariance matrix (precision) mixture components mixture_comps NULL. Assumes identity covariance scaled . Xa_dist_func Function. Function generate alternative-specific variables Xa. Takes n (nT), p, na (nXa) returns matrix (usually n x (p*na) similar structure expected createX). Default: function(n, p, na) matrix(runif(n*p*na, -1, 1), ncol=p*na). Xd_dist_func Function. Function generate choice-invariant variables Xd. Takes n (nT), nd (nXd) returns n x nd matrix. Default: function(n, nd) matrix(rnorm(n*nd), ncol=nd). seed Integer. Optional random seed reproducibility.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"list suitable direct use Data argument rhierMnlRwMixture, containing: p: Number alternatives. lgtdata: List length nlgt. element list(y=y_i, X=X_i, beta=beta_i, betabar=betabar_i). Z: nlgt x nz matrix individual-specific covariates (standardized requested). Additionally, list contains true_values: true_values$beta_true: nlgt x ncoef matrix true beta_i. true_values$betabar_true: nlgt x ncoef matrix true betabar_i = f(Z_i). true_values$true_params: List containing parameters used generation (beta_func_type, beta_func_args, mixture_comps, pvec). true_values$dimensions: List containing key dimensions used (p, nlgt, nT, nz, ncoef, etc.).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"","code":"# Simple linear example sim_data_linear <- sim_hier_mnl(nlgt = 50, nT = 5, p = 3, nz = 2, nXa = 1, nXd = 0,                                beta_func_type = \"linear\", seed = 123) plot(sim_data_linear$Z[,1], sim_data_linear$true_values$betabar_true[,1]) # Visualize linear   # Step function example sim_data_step <- sim_hier_mnl(nlgt = 50, nT = 5, p = 3, nz = 2, nXa = 1, nXd = 0,                               beta_func_type = \"step\",                               beta_func_args = list(Z_index = 1),                               seed = 456) plot(sim_data_step$Z[,1], sim_data_step$true_values$betabar_true[,1]) # Visualize step"},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"wrapper around sim_hier_mnl (R/sim_hier_mnl.R) providing simpler control common DGPs using custom betabar function. Fixes p=3, nXa=1, nXd=1, const=TRUE, ncomp=1. Allows specifying target variances betabar_i (mean zero first coef) eps_i.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"","code":"simple_sim_hier_mnl(   nlgt,   nT,   nz,   het_observed = c(\"none\", \"linear\", \"step\", \"friedman\"),   target_var_betabar = 1,   target_var_eps = 0.5,   seed = NULL )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"nlgt Number individuals. nT Number observations per individual. nz Number Z variables. het_observed Character. Functional form observed heterogeneity (betabar_i = f(Z_i)). Options: \"none\", \"linear\", \"step\", \"friedman\". target_var_betabar Numeric. Target variance first coefficient observed component betabar_i = f(Z_i). Must non-negative. first coefficient centered mean zero. remaining coefficients (2 ncoef) fixed constants -1, 1, -1, 1. Ignored het_observed = \"none\". target_var_eps Numeric. Target variance coefficient unobserved component eps_i. Must non-negative. Controls sigma_inv_diag. seed Integer. Optional random seed.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"Output list sim_hier_mnl.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"","code":"if (FALSE) { # \\dontrun{ # --- Simulate data with linear observed heterogeneity --- sim_lin <- simple_sim_hier_mnl(nlgt = 100, nT = 10, nz = 5,                                  het_observed = \"linear\",                                  target_var_betabar = 2.0,                                  target_var_eps = 0.5,                                  seed = 123)  # Check dimensions and structure print(names(sim_lin)) print(sim_lin$true_values$dimensions) print(str(sim_lin$lgtdata[[1]])) # Structure for one individual if (!is.null(sim_lin$Z)) print(dim(sim_lin$Z))  # Plot observed vs unobserved components for first coefficient beta_1 <- sim_lin$true_values$beta_true[, 1] betabar_1 <- sim_lin$true_values$betabar_true[, 1] eps_1 <- beta_1 - betabar_1  print(paste(\"Var(betabar_k1) =\", round(var(betabar_1), 2))) print(paste(\"Var(eps_k1) =\", round(var(eps_1), 2)))  # --- Simulate data with Friedman observed heterogeneity --- sim_fried <- simple_sim_hier_mnl(nlgt = 100, nT = 10, nz = 5,                                    het_observed = \"friedman\",                                    target_var_betabar = 1.5,                                    target_var_eps = 0.2,                                    seed = 456)  # Plot Z vs betabar for the first coefficient if (!is.null(sim_fried$Z) && ncol(sim_fried$Z) > 0) {   plot(sim_fried$Z[, 1], sim_fried$true_values$betabar_true[, 1],        xlab = \"Z1\", ylab = \"betabar_k1 (Friedman)\") }  # --- Simulate data with no observed heterogeneity --- sim_none <- simple_sim_hier_mnl(nlgt = 100, nT = 10, nz = 5,                                   het_observed = \"none\",                                   target_var_betabar = 0, # Should be ignored                                   target_var_eps = 1.0,                                   seed = 789)  # Check if betabar is zero print(all(sim_none$true_values$betabar_true == 0)) print(paste(\"Var(eps_k1) =\", round(var(sim_none$true_values$beta_true[, 1]), 2))) } # }"},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Marginal Effects Object — summary.marginal_effects","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"Computes posterior means quantiles draws stored marginal_effects object.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"","code":"# S3 method for class 'marginal_effects' summary(object, probs = c(0.025, 0.05, 0.5, 0.95, 0.975), ...)"},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"object object class \"marginal_effects\" created marginal_effects.rhierMnlRwMixture. probs Numeric vector quantile probabilities (0 1) compute. ... Additional arguments (currently ignored).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"list object class \"summary.marginal_effects\" containing: summary_df data frame columns coefficient_index, columns non-NA column input z_values (e.g., z_col_1, z_col_2, ... using original variable names available), mean, columns requested quantile (e.g., q2.5, q50, q97.5). row represents specific coefficient specific grid point defined row z_values. z_values original z_values matrix provided marginal_effects. probs numeric vector quantile probabilities used. call matched call summary function.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"","code":"# --- Assumes `mfx_result` exists from marginal_effects.rhierMnlRwMixture example --- if (exists(\"mfx_result\")) {   mfx_summary <- summary(mfx_result, probs = c(0.05, 0.5, 0.95))   print(mfx_summary$summary_df)   # --- Plotting example follows in plot.summary.marginal_effects ---  } else {   message(\"Run the example for 'marginal_effects.rhierMnlRwMixture' first.\") } #> Run the example for 'marginal_effects.rhierMnlRwMixture' first."}]
