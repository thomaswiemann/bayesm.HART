[{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://thomaswieman.com/bayesm.HART/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://thomaswieman.com/bayesm.HART/articles/getstarted.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"vignette illustrates use bayesm.HART package estimate hierarchical multinomial logit model. replicate application bank conjoint dataset bayesm, originally analyzed Allenby Ginter (1995). key feature bayesm.HART package use Hierarchical Additive Regression Tree (HART) prior. allows flexible, non-parametric specification representative consumer function observed characteristics. contrast HART logit model conventional hierarchical logit model specifies representative consumer linear function characteristics.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/articles/getstarted.html","id":"load-dependencies-and-data","dir":"Articles","previous_headings":"","what":"Load dependencies and data","title":"Get Started","text":"first load necessary packages bank dataset. re-format data use rhierMnlRwMixture. y variable contains binary choices, X design matrix credit card attributes. Z contains centered respondent characteristics (age, income, gender).","code":"# library(devtools) # load_all() library(bayesm) library(bayesm.HART) library(ggplot2) library(tidyr) library(dplyr) data(bank)  choiceAtt <- bank$choiceAtt hh <- levels(factor(choiceAtt$id)) nhh <- length(hh)  lgtdata <- vector(\"list\", length = nhh) for (i in 1:nhh) {     y = 2 - choiceAtt[choiceAtt[,1]==hh[i], 2]     nobs = length(y)     X_temp = as.matrix(choiceAtt[choiceAtt[,1]==hh[i], c(3:16)])     X = matrix(0, nrow = nrow(X_temp) * 2, ncol = ncol(X_temp))     X[seq(1, nrow(X), by = 2), ] = X_temp     lgtdata[[i]] = list(y=y, X=X) }  Z <- as.matrix(bank$demo[, -1]) Z_means <- colMeans(Z) Z <- t(t(Z) - Z_means)  Data <- list(lgtdata = lgtdata, Z = Z, p = 2)"},{"path":"https://thomaswieman.com/bayesm.HART/articles/getstarted.html","id":"estimate-models","dir":"Articles","previous_headings":"","what":"Estimate Models","title":"Get Started","text":"fit two models: HART logit model conventional linear hierarchical logit model. difference two specification representative consumer, Δ(Z)\\Delta(Z). HART model uses sum--trees prior, linear model uses linear function Z.","code":"# MCMC parameters R <- 2500 burn <- 250 keep <- 1 Mcmc <- list(R = R, keep = keep)  out_hart <- bayesm.HART::rhierMnlRwMixture(   Data = Data, Mcmc = Mcmc,    Prior = list(ncomp = 1, bart = list(num_trees = 20)) )  out_lin <- bayesm::rhierMnlRwMixture(   Data = Data, Mcmc = Mcmc,   Prior = list(ncomp = 1) ) class(out_lin) <- \"rhierMnlRwMixture\""},{"path":"https://thomaswieman.com/bayesm.HART/articles/getstarted.html","id":"mcmc-diagnostics","dir":"Articles","previous_headings":"","what":"MCMC Diagnostics","title":"Get Started","text":"simple way check convergence plot log-likelihood MCMC iterations. expect plot show stable path around mean value burn-period. MCMC Traceplot Log Likelihood. -sample fit comparison burn-:","code":"burnin_draws <- ceiling(burn / keep)   mcmc_data <- data.frame(   Iteration = (1:length(out_hart$loglike)) * keep,   HART = out_hart$loglike,   Linear = out_lin$loglike ) %>%    pivot_longer(cols = c(\"HART\", \"Linear\"), names_to = \"Model\", values_to = \"LogLikelihood\")  ggplot(mcmc_data, aes(x = Iteration, y = LogLikelihood, color = Model)) +   geom_line(alpha = 0.8) +   geom_vline(xintercept = burn, linetype = \"dashed\", color = \"black\") +   scale_color_manual(values = c(\"HART\" = \"blue\", \"Linear\" = \"red\")) +   theme_classic(base_size = 14) +   labs(title = \"Log-Likelihood Trace Plots\", x = \"MCMC Iteration\", y = \"Log-Likelihood\") +   theme(legend.title = element_blank()) mean(out_hart$loglike[-c(1:burnin_draws)]) #> [1] -4788.308 mean(out_lin$loglike[-c(1:burnin_draws)]) #> [1] -4807.552"},{"path":"https://thomaswieman.com/bayesm.HART/articles/getstarted.html","id":"individual-level-coefficients","dir":"Articles","previous_headings":"","what":"Individual-level Coefficients","title":"Get Started","text":"can inspect posterior distributions individual-level coefficients, part-worths. compare posteriors part-worth --state bank attribute two respondents. Respondent 146 member segment older women low income; respondent 580 member segment middle-aged men moderate income. Posterior Distributions Individual-level Part-Worths.","code":"selected_resp <- c(146, 580) coef_indx <- 10 # \"Interest\" coefficient coef_name <- colnames(bank$choiceAtt[, 3:16])[coef_indx]  # Create a combined factor for filling histograms beta_draws <- bind_rows(   as.data.frame(t(out_hart$betadraw[selected_resp, coef_indx, -c(1:burnin_draws)])) %>%      mutate(Model = \"HART\", Draw = row_number()),   as.data.frame(t(out_lin$betadraw[selected_resp, coef_indx, -c(1:burnin_draws)])) %>%      mutate(Model = \"Linear\", Draw = row_number()) ) colnames(beta_draws)[1:2] <- paste(\"Respondent\", selected_resp)  beta_draws_long <- beta_draws %>%   pivot_longer(     cols = starts_with(\"Respondent\"),      names_to = \"Respondent\",      values_to = \"Coefficient\"   ) %>%    mutate(       Model = factor(Model, levels = c(\"Linear\", \"HART\")), # Control facet order       Group = interaction(Respondent, Model)   )  # Define colors model_fills <- c(     \"Respondent 146.Linear\" = \"lightcoral\", \"Respondent 580.Linear\" = \"darkred\",     \"Respondent 146.HART\" = \"lightblue\", \"Respondent 580.HART\" = \"darkblue\" ) model_colors <- c(     \"Respondent 146.Linear\" = \"red\", \"Respondent 580.Linear\" = \"darkred\",     \"Respondent 146.HART\" = \"blue\", \"Respondent 580.HART\" = \"darkblue\" )  # Calculate means means <- beta_draws_long %>%   group_by(Group, Model) %>%   summarise(mean_val = mean(Coefficient), .groups = \"drop\")  ggplot(beta_draws_long, aes(x = Coefficient, fill = Group)) +   geom_histogram(     aes(y = after_stat(density)),     alpha = 0.6, bins = 45, position = \"identity\", color = \"black\", linewidth = 0.3   ) +   geom_vline(     data = means, aes(xintercept = mean_val, color = Group),     linetype = \"dashed\", linewidth = 1.2   ) +   facet_wrap(~Model) +   scale_fill_manual(       name = \"Respondent\",       values = model_fills,       breaks = c(\"Respondent 146.Linear\", \"Respondent 580.Linear\", \"Respondent 146.HART\", \"Respondent 580.HART\"),       labels = c(\"Respondent 146\", \"Respondent 580\", \"Respondent 146\", \"Respondent 580\")   ) +   scale_color_manual(values = model_colors, guide = \"none\") +   theme_classic(base_size = 16) +   theme(     axis.title = element_text(size = 18),     legend.position = \"top\",     legend.title = element_blank(),     strip.text = element_text(size = 16, face = \"bold\"),     strip.background = element_rect(fill = \"grey90\", color = \"black\")   ) +     labs(     title = paste(\"Posterior of\", coef_name, \"Coefficient\"),     x = \"Coefficient Value\", y = \"Density\"   )"},{"path":"https://thomaswieman.com/bayesm.HART/articles/getstarted.html","id":"the-representative-respondent","dir":"Articles","previous_headings":"","what":"The Representative Respondent","title":"Get Started","text":"model estimates part-worths vary demographics Z. term Delta(Z) represents expected part-worth “representative” respondent characteristics Z. can use predict function get posterior draws Delta(Z) selected respondents. Posterior Distributions Expected Part-Worths.","code":"# We predict for all respondents and then select DeltaZ_hat_hart <- predict(out_hart, newdata = Data, type = \"DeltaZ+mu\", burn = burn) DeltaZ_hat_lin <- predict(out_lin, newdata = Data, type = \"DeltaZ+mu\", burn = burn) deltaZ_draws <- bind_rows(   as.data.frame(t(DeltaZ_hat_hart[selected_resp, coef_indx, ])) %>%      mutate(Model = \"HART\", Draw = row_number()),   as.data.frame(t(DeltaZ_hat_lin[selected_resp, coef_indx, ])) %>%      mutate(Model = \"Linear\", Draw = row_number()) ) colnames(deltaZ_draws)[1:2] <- paste(\"Respondent\", selected_resp)  deltaZ_draws_long <- deltaZ_draws %>%   pivot_longer(     cols = starts_with(\"Respondent\"),      names_to = \"Respondent\",      values_to = \"Coefficient\"   ) %>%    mutate(       Model = factor(Model, levels = c(\"Linear\", \"HART\")), # Control facet order       Group = interaction(Respondent, Model)   )    # Re-using the color definitions from the previous chunk model_fills <- c(     \"Respondent 146.Linear\" = \"lightcoral\", \"Respondent 580.Linear\" = \"darkred\",     \"Respondent 146.HART\" = \"lightblue\", \"Respondent 580.HART\" = \"darkblue\" ) model_colors <- c(     \"Respondent 146.Linear\" = \"red\", \"Respondent 580.Linear\" = \"darkred\",     \"Respondent 146.HART\" = \"blue\", \"Respondent 580.HART\" = \"darkblue\" )  # Calculate means means_deltaZ <- deltaZ_draws_long %>%   group_by(Group, Model) %>%   summarise(mean_val = mean(Coefficient), .groups = \"drop\")  ggplot(deltaZ_draws_long, aes(x = Coefficient, fill = Group)) +   geom_histogram(     aes(y = after_stat(density)),     alpha = 0.6, bins = 45, position = \"identity\", color = \"black\", linewidth = 0.3   ) +   geom_vline(     data = means_deltaZ, aes(xintercept = mean_val, color = Group),     linetype = \"dashed\", linewidth = 1.2   ) +   facet_wrap(~Model) +   scale_fill_manual(       name = \"Respondent\",       values = model_fills,       breaks = c(\"Respondent 146.Linear\", \"Respondent 580.Linear\", \"Respondent 146.HART\", \"Respondent 580.HART\"),       labels = c(\"Respondent 146\", \"Respondent 580\", \"Respondent 146\", \"Respondent 580\")   ) +   scale_color_manual(values = model_colors, guide = \"none\") +   theme_classic(base_size = 16) +   theme(     axis.title = element_text(size = 18),     legend.position = \"top\",     legend.title = element_blank(),     strip.text = element_text(size = 16, face = \"bold\"),     strip.background = element_rect(fill = \"grey90\", color = \"black\")   ) +     labs(     title = paste(\"Posterior of Representative Respondent's '\", coef_name, \"' Coefficient (DeltaZ+mu)\"),     x = \"Coefficient Value\", y = \"Density\"   )"},{"path":"https://thomaswieman.com/bayesm.HART/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Wiemann. Author, maintainer.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wiemann T (2025). bayesm.HART: Bayesian Multinomial Logit Models HART Priors. R package version 0.0.0.9000.","code":"@Manual{,   title = {bayesm.HART: Bayesian Multinomial Logit Models with HART Priors},   author = {Thomas Wiemann},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"bayesmhart","dir":"","previous_headings":"","what":"Bayesian Multinomial Logit Models with HART Priors","title":"Bayesian Multinomial Logit Models with HART Priors","text":"bayesm.HART implements Metropolis-within-Gibbs sampler Hierarchical Additive Regression Trees (HART) logit model proposed Wiemann (2025). HART generalizes conventional hierarchical models defining representative consumer flexible function potentially many characteristics. Drawing Bayesian Additive Regression Trees (BART) Chipman, George, McCulloch (2010), HART specifies function sum--trees factor model. HART’s combination flexible nonparametric prior within hierarchical model provides coherent framework (Bayes-) optimal managerial decisions adapt firm’s familiarity consumer: first, HART flexibly leverages observed characteristics granular predictions new consumers; second, consumer’s choices accumulate, individual-level preferences adaptively deviate representative unit. See corresponding working paper Personalization HART discussion details.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Multinomial Logit Models with HART Priors","text":"Install latest development version GitHub (requires devtools package):","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"thomaswiemann/bayesm.HART\", dependencies = TRUE)"},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bayesian Multinomial Logit Models with HART Priors","text":"following example applies HART logit model canonical conjoint dataset Allenby Ginter (1995) credit card design, included bayesm package. first code block loads data formats list structure required rhierMnlRwMixture. fits HART logit model using Metropolis-within-Gibbs sampler. specify sum--trees prior 50 trees representative consumer run MCMC algorithm 2,000 iterations, keeping every second draw. MCMC draws fitted model, can compute posterior estimates quantity interest. key object representative consumer, represents expected part-worths consumer characteristics. following code computes posterior mean standard deviation expected part-worths three credit card attributes.","code":"library(bayesm.HART) library(bayesm)  # Load and prepare data from the 'bank' dataset data(bank) choiceAtt <- bank$choiceAtt hh <- levels(factor(choiceAtt$id)) nhh <- length(hh) lgtdata <- vector(\"list\", length = nhh) for (i in 1:nhh) {     y = 2 - choiceAtt[choiceAtt[,1]==hh[i], 2]     nobs = length(y)     X_temp = as.matrix(choiceAtt[choiceAtt[,1]==hh[i], c(3:16)])     X = matrix(0, nrow = nrow(X_temp) * 2, ncol = ncol(X_temp))     X[seq(1, nrow(X), by = 2), ] = X_temp     lgtdata[[i]] = list(y=y, X=X) } Z <- as.matrix(bank$demo[, -1]) Z <- t(t(Z) - colMeans(Z)) Data <- list(lgtdata = lgtdata, Z = Z, p = 2)  # Set MCMC parameters and suppress sampler output Mcmc <- list(R = 2000, keep = 2, nprint = 500)  # Fit the HART logit model out <- bayesm.HART::rhierMnlRwMixture(     Data = Data, Mcmc = Mcmc,      Prior = list(ncomp = 1, bart = list(num_trees = 50)) ) #> Table of Y values pooled over all units #> ypooled #>    1    2  #> 6473 8326  #>   #> Starting MCMC Inference for Hierarchical Logit: #>    Normal Mixture with 1 components for first stage prior #>    2  alternatives;  14  variables in X #>    for  946  cross-sectional units #>   #> Prior Parms:  #> nu = 17 #> V  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   17    0    0    0    0    0    0    0    0     0     0     0     0 #>  [2,]    0   17    0    0    0    0    0    0    0     0     0     0     0 #>  [3,]    0    0   17    0    0    0    0    0    0     0     0     0     0 #>  [4,]    0    0    0   17    0    0    0    0    0     0     0     0     0 #>  [5,]    0    0    0    0   17    0    0    0    0     0     0     0     0 #>  [6,]    0    0    0    0    0   17    0    0    0     0     0     0     0 #>  [7,]    0    0    0    0    0    0   17    0    0     0     0     0     0 #>  [8,]    0    0    0    0    0    0    0   17    0     0     0     0     0 #>  [9,]    0    0    0    0    0    0    0    0   17     0     0     0     0 #> [10,]    0    0    0    0    0    0    0    0    0    17     0     0     0 #> [11,]    0    0    0    0    0    0    0    0    0     0    17     0     0 #> [12,]    0    0    0    0    0    0    0    0    0     0     0    17     0 #> [13,]    0    0    0    0    0    0    0    0    0     0     0     0    17 #> [14,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>       [,14] #>  [1,]     0 #>  [2,]     0 #>  [3,]     0 #>  [4,]     0 #>  [5,]     0 #>  [6,]     0 #>  [7,]     0 #>  [8,]     0 #>  [9,]     0 #> [10,]     0 #> [11,]     0 #> [12,]     0 #> [13,]     0 #> [14,]    17 #> mubar  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0 #> Amu  #>      [,1] #> [1,] 0.01 #> a  #> [1] 5 #>  #> BART prior parameters: #> num_trees = 50 #> power = 2 #> base = 0.95 #> tau = 0.141421 #> numcut = 100 #> sparse = 0 #>   #> MCMC Parms:  #> s= 0.636  w=  0.1  R=  2000  keep=  2  nprint=  500 #>  #> initializing Metropolis candidate densities for  946  units ... #>   completed unit # 50 #>   completed unit # 100 #>   completed unit # 150 #>   completed unit # 200 #>   completed unit # 250 #>   completed unit # 300 #>   completed unit # 350 #>   completed unit # 400 #>   completed unit # 450 #>   completed unit # 500 #>   completed unit # 550 #>   completed unit # 600 #>   completed unit # 650 #>   completed unit # 700 #>   completed unit # 750 #>   completed unit # 800 #>   completed unit # 850 #>   completed unit # 900 #>  MCMC Iteration (est time to end - min)  #>  500 (0.9) #>  1000 (0.6) #>  1500 (0.3) #>  2000 (0.0) #>  Total Time Elapsed: 1.22 DeltaZ_hat <- predict(out, newdata = Data, type = \"DeltaZ+mu\",                        burn = 250, r_verbose=F)  posterior_mean <- apply(DeltaZ_hat, 2, mean) posterior_sd <- apply(DeltaZ_hat, 2, sd)  # Indices for the desired coefficients: # 2: Interest Low Fixed # 8: Annual Fee Low # 10: Bank Out-of-State selected_indices <- c(2, 8, 10)  # Create a matrix with means and sds as rows results_matrix <- rbind(   `Posterior Mean` = posterior_mean[selected_indices],   `Posterior SD`   = posterior_sd[selected_indices] )  # Convert to a data frame and set column names results_df <- as.data.frame(results_matrix) colnames(results_df) <- c(\"Interest Low Fixed\", \"Annual Fee Low\", \"Bank Out-of-State\")  # Print the data frame to the console print(results_df, digits = 3) #>                Interest Low Fixed Annual Fee Low Bank Out-of-State #> Posterior Mean              5.154           4.43             -3.44 #> Posterior SD                0.959           1.01              1.03"},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"learn-more-about-bayesmhart","dir":"","previous_headings":"","what":"Learn More about bayesm.HART","title":"Bayesian Multinomial Logit Models with HART Priors","text":"Check articles learn : vignette(\"bayesm.HART\") provides detailed introduction vignette(\"marginal-effects\") discusses compute plot marginal effects.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Bayesian Multinomial Logit Models with HART Priors","text":"bayesm.HART originated fork bayesm BART packages. current implementation heavily leverages codebase foundational work packages. gratefully acknowledge contributions respective authors: bayesm: Peter Rossi BART: Robert McCulloch, Rodney Sparapani, Robert Gramacy, Matthew Pratola, Charles Spanbauer, Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines","code":""},{"path":"https://thomaswieman.com/bayesm.HART/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian Multinomial Logit Models with HART Priors","text":"Allenby, Greg M. James L. Ginter (1995). “Using Extremes Design Products Segment Markets.” Journal Marketing Research 32.4, pp. 392–403. Chipman, Hugh ., Edward . George, Robert E. McCulloch (2010). “BART: Bayesian Additive Regression Trees.” Annals Applied Statistics 4.1. Rossi, Peter E., Greg M. Allenby, Robert McCulloch (2009). Bayesian Statistics Marketing. Reprint. Wiley Series Probability Statistics. Chichester: Wiley. Rossi, Peter (2023). bayesm: Bayesian Inference Marketing/Micro-Econometrics. Comprehensive R Archive Network. Sparapani, Rodney, Charles Spanbauer, Robert McCulloch (2021). “Nonparametric Machine Learning Efficient Computation Bayesian Additive Regression Trees: BART R Package.” Journal Statistical Software 97, pp. 1–66. Wiemann, Thomas (2025). “Personalization HART.” Working paper.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/bayesm.HART-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bayesm.HART: Hierarchical Logit Models with Bayesian Additive Regression Trees — bayesm.HART-package","title":"bayesm.HART: Hierarchical Logit Models with Bayesian Additive Regression Trees — bayesm.HART-package","text":"bayesm.HART package provides hierarchical Bayesian machine learning approach personalization. core, package implements Metropolis-within-Gibbs sampler hierarchical logit model Hierarchical Additive Regression Trees (HART) prior. HART nonparametric prior models \"representative consumer\" flexible sum--trees function observed characteristics. extends conventional hierarchical models often limited linear functions characteristics.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/bayesm.HART-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bayesm.HART: Hierarchical Logit Models with Bayesian Additive Regression Trees — bayesm.HART-package","text":"Maintainer: Thomas Wiemann wiemann@uchicago.edu","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Null Coalescing Operator — %||%","title":"Null Coalescing Operator — %||%","text":"Provides default value left-hand side expression evaluates NULL. Similar rlang::%||%.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null Coalescing Operator — %||%","text":"","code":"a %||% b"},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null Coalescing Operator — %||%","text":"expression check. b default value NULL.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/grapes-or-or-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null Coalescing Operator — %||%","text":"NULL, otherwise b.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"Computes posterior distribution average marginal effects varying target covariate grid.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"","code":"marginal_effects(object, ...)  # S3 method for class 'rhierMnlRwMixture' marginal_effects(object, z_values, Z, burn = 0, verbose = TRUE, ...)"},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"object fitted rhierMnlRwMixture object. ... Additional arguments (currently ignored). z_values numeric matrix row represents specific grid point evaluation. Columns correspond covariates model's original Z matrix. Non-NA values row fix corresponding covariate value grid point. NA values indicate covariate take value corresponding row base Z matrix provided. Z numeric matrix representing base population context effects averaged. must number columns required model (nz). grid point (row) z_values, counterfactual matrix constructed based Z, average effect across rows counterfactual matrix calculated. burn Integer, number initial MCMC draws discard. verbose Logical, whether print progress messages.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"result depends method implementation. list object class \"marginal_effects\" containing: z_values user-provided matrix grid points used evaluation. avg_betabar_draws list element [[]] ncoef x ndraws_use matrix representing posterior draws average betabar (DeltaZ + mu), evaluated -th grid point (row z_values) averaged rows base Z matrix. call matched call function. burn number burn-draws discarded.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"generic function. main implementation package marginal_effects.rhierMnlRwMixture.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/marginal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Marginal Effects for Hierarchical Models — marginal_effects","text":"","code":"# --- Simulate Data (requires bayesm.HART package) --- if (requireNamespace(\"bayesm.HART\", quietly = TRUE)) {   sim_data <- bayesm.HART::sim_hier_mnl(nlgt = 50, nT = 10, p = 3, nz = 3,                                      nXa = 1, nXd = 0, seed = 123)   Data <- list(p = sim_data$p, lgtdata = sim_data$lgtdata, Z = sim_data$Z)   ncoef <- sim_data$true_values$dimensions$ncoef   # --- Fit Model (minimal run for example) ---   # Note: Use much larger R and keep for real analysis!   Prior <- list(ncomp = 1)   Mcmc <- list(R = 100, keep = 1)   # Use try() to avoid errors stopping the example build if model fails   fit <- try(bayesm.HART::rhierMnlRwMixture(Data = Data, Prior = Prior, Mcmc = Mcmc,                                          r_verbose = FALSE), silent = TRUE)   if (!inherits(fit, \"try-error\")) {     # --- Define Grid for Marginal Effects (vary Z1) ---     target_z_index <- 1     grid_z1 <- seq(min(Data$Z[, target_z_index]),                     max(Data$Z[, target_z_index]),                     length.out = 5)     z_grid <- matrix(NA, nrow = length(grid_z1), ncol = ncol(Data$Z))     z_grid[, target_z_index] <- grid_z1     # --- Calculate Marginal Effects ---     mfx_result <- marginal_effects(fit,                                       z_values = z_grid,                                       Z = Data$Z,                                       burn = 20, # Discard first 20 draws                                      verbose = FALSE)     print(names(mfx_result))     print(dim(mfx_result$avg_betabar_draws[[1]])) # Check dimensions     # --- Summarize Effects (see example for summary.marginal_effects) ---      # --- Plot Effects (see example for plot.summary.marginal_effects) ---   } } #>  MCMC Iteration (est time to end - min)  #>  100 (0.0) #>  Total Time Elapsed: 0.00  #> [1] \"z_values\"          \"avg_betabar_draws\" \"call\"              #> [4] \"burn\"              #> [1]  3 80"},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"Creates ggplot visualization summarized marginal effects one summary.marginal_effects objects.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"","code":"# S3 method for class 'summary.marginal_effects' plot(   x,   ...,   coef_index = 1,   ci_level = 0.95,   plot_axis_var = NULL,   xlab = NULL,   ylab = NULL,   title = NULL,   color_values = NULL,   linetype_values = NULL,   fill_values = NULL,   show_legend = TRUE,   x_name = NULL )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"x object class \"summary.marginal_effects\". ... Additional named objects class \"summary.marginal_effects\" plotted alongside x. names used legend. coef_index Integer, index coefficient (beta) plot. Defaults 1. ci_level Numeric (0 < ci_level < 1), credible interval level display ribbon (e.g., 0.95 95% CI). Requires corresponding quantiles (e.g., q2.5 q97.5 q25 q975) present summary_df input object(s). Defaults 0.95. plot_axis_var Character, name column summary_df use x-axis (must one z_val_* columns derived non-NA columns original z_values input marginal_effects). NULL (default), function use first column found x$summary_df matches pattern ^z_val_[0-9]+$. xlab Character, custom label x-axis. NULL (default), label value plot_axis_var. ylab Character, custom label y-axis. Defaults describing mean effect selected coefficient. title Character, custom plot title. NULL (default), title indicate coefficient variable plotted x-axis. color_values Named character vector custom colors (e.g., c(\"Model \" = \"blue\", \"Model B\" = \"red\")). NULL, default ggplot colors used. linetype_values Named character vector custom linetypes (e.g., c(\"Model \" = \"solid\", \"Model B\" = \"dashed\")). NULL, default ggplot linetypes used. fill_values Named character vector custom ribbon fills (e.g., c(\"Model \" = \"blue\", \"Model B\" = \"red\")). NULL, default ggplot fills derived colors used. show_legend Logical, legend displayed? Defaults TRUE. x_name Character, optional name assign primary object x legend. NULL (default), function attempts infer name.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"ggplot object.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"function plots specified coefficient's posterior mean credible interval variable specified plot_axis_var. original marginal_effects call used z_values matrix varied across multiple dimensions (resulting multiple z_val_* columns summary_df), plot show relationship chosen plot_axis_var, overlaying results combinations varying dimensions. instance, z_val_1 z_val_2 exist plot_axis_var = \"z_val_1\", plot show lines distinct value z_val_2 (implicitly, overlaid). visualize effect along one dimension conditional specific values dimensions, filter summary_df within summary.marginal_effects object passing function.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/plot.summary.marginal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Summarized Marginal Effects — plot.summary.marginal_effects","text":"","code":"# --- Full Example Sequence for Plotting --- # Requires ggplot2 and bayesm.HART if (requireNamespace(\"bayesm.HART\", quietly = TRUE) &&      requireNamespace(\"ggplot2\", quietly = TRUE)) {    # 1. Simulate Data (using a step function for beta_i)   # Define simulation parameters   nlgt_sim <- 200; nT_sim <- 20; p_sim <- 3; nz_sim <- 2   nXa_sim <- 1; nXd_sim <- 0; const_sim <- TRUE   # Calculate expected ncoef based on parameters   ncoef_sim <- const_sim*(p_sim - 1) + (p_sim - 1)*nXd_sim + nXa_sim   # Define arguments for the step function (using defaults from sim_hier_mnl)   step_args_ex <- list(     cutoff = 0,               # Default cutoff     beta_1 = rep(-2, ncoef_sim), # Value above cutoff (default in sim_hier_mnl)     beta_2 = rep(2, ncoef_sim),  # Value below cutoff (default in sim_hier_mnl)     Z_index = 1               # Step based on Z1   )   sim_data <- bayesm.HART::sim_hier_mnl(nlgt = nlgt_sim, nT = nT_sim, p = p_sim, nz = nz_sim,                                     nXa = nXa_sim, nXd = nXd_sim, const = const_sim,                                     seed = 123,                                     beta_func_type = \"step\",                                     beta_func_args = step_args_ex # Pass the full list                                     )   Data <- list(p = sim_data$p, lgtdata = sim_data$lgtdata, Z = sim_data$Z)   # Use actual ncoef from simulation output for consistency   ncoef <- sim_data$true_values$dimensions$ncoef     # 2. Fit Model (minimal run for example)   Prior <- list(ncomp = 1,                 bart = list(num_trees = 10,                             num_cut = 10))   Mcmc <- list(R = 500, keep = 1, nprint = 0)   fit <- try(bayesm.HART::rhierMnlRwMixture(Data = Data, Prior = Prior,                                          Mcmc = Mcmc,                                          r_verbose = FALSE), silent = TRUE)    if (!inherits(fit, \"try-error\")) {     # 3. Define Grid (Vary Z1, which drives the step function)     target_z_index <- 1     grid_z1 <- sort(c(seq(min(Data$Z[, target_z_index]),                             max(Data$Z[, target_z_index]),                             length.out = 6), 0)) # Use more points for step     z_grid <- matrix(NA, nrow = length(grid_z1), ncol = ncol(Data$Z))     z_grid[, target_z_index] <- grid_z1      # 4. Calculate Marginal Effects     mfx_result <- marginal_effects(fit,                                       z_values = z_grid,                                       Z =Data$Z,                                       burn = 200,                                       verbose = FALSE)      # 5. Summarize Marginal Effects     mfx_summary <- summary(mfx_result, probs = c(0.025, 0.5, 0.975))      # 6. Plot the Summary (showing effect of Z1 on coef 1)     # Ensure the axis variable name matches the column in summary_df     plot_var_name <- paste0(\"z_val_\", target_z_index)      try(plot(mfx_summary, coef_index = 1, plot_axis_var = plot_var_name), silent = TRUE)    } else {     message(\"Model fitting failed in example, skipping plotting.\")   } } else {   message(\"Requires bayesm.HART and ggplot2 packages for examples.\") }"},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"Predict Method rhierMnlRwMixture Objects","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"","code":"# S3 method for class 'rhierMnlRwMixture' predict(   object,   newdata = NULL,   type = \"DeltaZ+mu\",   burn = 0,   nsim = 10,   r_verbose = TRUE,   ... )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"object fitted rhierMnlRwMixture object. newdata Optional list containing data prediction. Structure depends type: type %% c(\"DeltaZ\", \"DeltaZ+mu\"): Requires newdata$Z, matrix npred rows prediction units (model fit Z). type = \"posterior_probs\": Requires newdata$nlgtdata, list length nlgt (original number units). element \\\\[[]] must contain $X, design matrix (T_i*p) x nvar unit . Also requires newdata$p, number alternatives. type = \"prior_probs\": Requires newdata$Z (model fit Z, determining npred), newdata$p, newdata$X (list length npred, element \\\\[[]] design matrix (T_i*p) x nvar). type Type prediction: \"DeltaZ\": Expected part-worths representative consumer, \\(\\Delta(Z)\\). \"DeltaZ+mu\": Expected part-worths plus mean unobserved heterogeneity component, \\(\\Delta(Z) + \\mu_j\\). Note: mixtures (ncomp > 1), uses mean \\(\\mu_1\\) first component. \"posterior_probs\": Posterior predictive choice probabilities original estimation units using stored betadraw. \"prior_probs\": Prior predictive choice probabilities new prediction units (based newdata$Z overall mixture Z used). Probabilities averaged nsim draws heterogeneity mixture distribution per posterior draw. burn Integer, number initial MCMC draws discard. nsim Integer, number draws heterogeneity mixture distribution per posterior draw type = \"prior_probs\". r_verbose Logical, print progress updates? ... Additional arguments passed underlying prediction functions (e.g., mc.cores, verbose BART DeltaZ predictions via pwbart).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/predict.rhierMnlRwMixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for rhierMnlRwMixture Objects — predict.rhierMnlRwMixture","text":"Depends type: type %% c(\"DeltaZ\", \"DeltaZ+mu\"): 3D array [npred, nvar, ndraws_out] predicted expected part-worths. type = \"posterior_probs\": List length nlgt. element \\\\[[]] 3D array [T_i, p, ndraws_out] posterior predictive choice probabilities unit . type = \"prior_probs\": List length npred. element \\\\[[]] 3D array [T_i, p, ndraws_out] prior predictive choice probabilities prediction unit .","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"rhierMnlRwMixture implements MCMC algorithm Bayesian multinomial logit model Hierarchical Additive Regression Trees (HART) prior. model allows flexible modeling representative consumer captures unobserved preference heterogeneity.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"","code":"rhierMnlRwMixture(Data, Prior, Mcmc, r_verbose = TRUE)"},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Data list containing: p: Number choice alternatives (integer). lgtdata: list length nlgt. element lgtdata[[]] must list : y: n_i x 1 vector multinomial outcomes (1 p). X: (n_i * p) x nvar matrix alternative-specific attributes. Z (optional): nlgt x nz matrix observed characteristics unit. contain intercept typically centered. Prior list containing prior parameters: ncomp: Number mixture components (required). (optional): ncomp x 1 vector Dirichlet prior parameters mixture weights pvec (default: rep(5, ncomp)). deltabar (optional): nz * nvar x 1 prior mean vec(Delta) (default: 0). Ignored BART used. Ad (optional): Prior precision matrix vec(Delta) (default: 0.01 * ). Ignored BART used. mubar (optional): nvar x 1 prior mean component means (default: 0 unrestricted, 2 restricted). Amu (optional): Prior precision component means (default: 0.01 unrestricted, 0.1 restricted). nu (optional): Degrees freedom IW prior component Sigma (default: nvar+3 unrestricted, nvar+15 restricted). V (optional): Location matrix IW prior component Sigma (default: nu * scaled based restriction). SignRes (optional): nvar x 1 vector sign restrictions (0=none, 1=pos, -1=neg). Default: rep(0, nvar). bart (optional): List parameters HART prior. specified, models representative consumer \\(\\Delta(Z)\\) sum--trees. See Details. Mcmc list containing MCMC parameters: R: Number MCMC iterations (required). keep (optional): Thinning parameter (default: 1). nprint (optional): Print progress every nprint draws (default: 100, 0 none). s (optional): RW Metropolis scaling parameter (default: 2.93 / sqrt(nvar)). w (optional): Fractional likelihood weighting parameter (default: 0.1). r_verbose Logical. Print startup messages? Default TRUE.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"list containing: Deltadraw: Z provided bart=NULL, (R/keep) x (nz * nvar) matrix vec(Delta) draws. betadraw: nlgt x nvar x (R/keep) array unit-level beta_i draws. nmix: List containing mixture draws (probdraw, zdraw, compdraw). See Details. loglike: (R/keep) x 1 vector log-likelihood values kept draws. SignRes: nvar x 1 vector sign restrictions used. bart_trees: BART used, list containing tree structures.","code":""},{"path":[]},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"model-and-priors","dir":"Reference","previous_headings":"","what":"Model and Priors","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"\\(y_i \\sim MNL(X_i, \\beta_i)\\) unit \\(= 1, ..., nlgt\\). unit-level coefficients (part-worths) \\(\\beta_i\\) modeled : $$\\beta_i = \\Delta(Z_i) + u_i$$ \\(\\Delta(Z_i)\\) representative consumer component, depends observed characteristics \\(Z_i\\), \\(u_i\\) unobserved heterogeneity component. Z provided Prior$bart NULL: \\(\\Delta(Z_i) = Z_i \\Delta\\) (linear model). Z provided Prior$bart list: \\(\\Delta(Z_i)\\) modeled HART prior (sum--trees). Z NULL: \\(\\Delta(Z_i) = 0\\). unobserved heterogeneity component \\(u_i\\) follows mixture normals: $$u_i \\sim \\sum_{j=1}^{ncomp} p_j N(\\mu_j, \\Sigma_j)$$ Priors: mixture weights: \\(pvec \\sim Dirichlet()\\) linear model: \\(\\delta = vec(\\Delta) \\sim N(deltabar, A_d^{-1})\\) HART model: sum--trees prior placed dimension standardized \\(\\Delta(Z_i)\\). See BART details . mixture component means: \\(\\mu_j \\sim N(mubar, \\Sigma_j \\otimes Amu^{-1})\\) (Note: Scaled Sigma_j) mixture component covariance: \\(\\Sigma_j \\sim IW(\\nu, V)\\)","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"argument-details","dir":"Reference","previous_headings":"","what":"Argument Details","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Data List: p: Number alternatives. lgtdata: List nlgt lists. lgtdata[[]] = list(y, X). Z: nlgt x nz matrix (optional). Centered, intercept. Prior List: ncomp: Number mixture components. See @param descriptions defaults. Mcmc List: R: Number draws. See @param descriptions defaults. HART Prior (Prior$bart): Prior$bart list, specifies HART prior representative consumer, \\(\\Delta(Z)\\). replaces conventional linear specification \\(Z \\Delta\\). HART prior models dimension (standardized) representative consumer sum--trees. Relevant parameters (defaults used specified Prior$bart): num_trees: Number trees sum--trees model (default: 200). power, base: Parameters tree structure prior. probability node depth q splitting \\(\\alpha(1+q)^{-\\beta}\\), base=\\alpha power=\\beta. Defaults base=0.95, power=2, favors shallow trees. tau: standard deviation normal prior terminal leaf coefficients, \\(\\lambda_{dhg} \\sim N(0, \\tau^2)\\). default value 1/sqrt(num_trees), regularizes model shrinking individual tree contributions small. numcut: Number grid points proposing splitting rules continuous variables (default: 100). sparse: TRUE, use Dirichlet HART prior induce sparsity. See next section. (default: FALSE). burn: Number internal burn-iterations BART-sampler within MCMC iteration (default: 100).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"dirichlet-hart-sparse-true-","dir":"Reference","previous_headings":"","what":"Dirichlet HART (sparse = TRUE)","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Dirichlet HART model augments HART prior induce sparsity variable selection, following Linero (2018). selection probabilities splitting variables given Dirichlet(zeta/K, ..., zeta/K) prior, K number characteristics. concentration parameter zeta given Beta(,b) hyperprior zeta/(zeta+rho). , b: Shape parameters Beta hyperprior. default (=0.5, b=1) induces sparsity. rho: parameter influences number selected variables. Default number characteristics. theta, omega: Additional parameters sparsity-inducing prior (defaults: 0.0, 1.0). aug: Logical. internal use, relevant logit model.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"sign-restrictions","dir":"Reference","previous_headings":"","what":"Sign Restrictions","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"SignRes[k] non-zero, k-th coefficient \\(\\beta_{ik}\\) modeled $$\\beta_{ik} = SignRes[k] \\cdot exp(\\beta^*_{ik}).$$ betadraw output contains draws \\(\\beta_{ik}\\) (restriction applied). nmix output contains draws unrestricted mixture components.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"nmix-details","dir":"Reference","previous_headings":"","what":"nmix Details","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"nmix list: list(probdraw, zdraw, compdraw) probdraw: (R/keep) x ncomp matrix mixture component probabilities. zdraw: (R/keep) x nlgt matrix component assignments unit (.e., j \\(u_i\\)). compdraw: (R/keep) list ncomp lists. compdraw[[r]][[j]] = list(mu, rooti) contains draw \\(\\mu_j\\) \\(\\Sigma_j^{-1/2}\\) component j kept draw r.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Rossi, Peter E., Greg M. Allenby, Robert McCulloch (2009). Bayesian Statistics Marketing. Reprint. Wiley Series Probability Statistics. Chichester: Wiley. Rossi, Peter (2023). bayesm: Bayesian Inference Marketing/Micro-Econometrics. Comprehensive R Archive Network. Wiemann, Thomas (2025). \"Personalization HART.\" Working paper.","code":""},{"path":[]},{"path":"https://thomaswieman.com/bayesm.HART/reference/rhierMnlRwMixture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Multinomial Logit Model with HART Prior — rhierMnlRwMixture","text":"Peter Rossi (original bayesm code), Thomas Wiemann (HART modifications).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"Generates simulated data suitable testing hierarchical multinomial logit models, particularly involving individual-specific covariates (Z) influencing coefficients (beta_i). Supports various functional forms Z-beta relationship mixture models residual heterogeneity.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"","code":"sim_hier_mnl(   nlgt = 300,   nT = 10,   p = 3,   nz = 5,   nXa = 2,   nXd = 1,   const = TRUE,   z_dist_func = function(n, d) matrix(stats::runif(n * d, -1, 1), n, d),   standardize_Z = TRUE,   beta_func_type = \"linear\",   beta_func_args = list(),   ncomp = 1,   mixture_comps = NULL,   sigma_inv_diag = 1,   Xa_dist_func = function(n, p, na) matrix(stats::runif(n * p * na, -1, 1), ncol = p *     na),   Xd_dist_func = function(n, nd) matrix(stats::rnorm(n * nd), ncol = nd),   seed = NULL )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"nlgt Integer. Number individuals cross-sectional units. nT Integer. Number choice observations per individual. p Integer. Number choice alternatives (including outside option ). nz Integer. Number demographic/individual-specific variables Z. nz = 0, Z matrix generated, betabar_true set zero, beta_func_type/beta_func_args ignored. nXa Integer. Number alternative-specific variables X. nXd Integer. Number choice-invariant variables X (e.g., price). const Logical. Include p-1 intercepts model? z_dist_func Function. function generate Z matrix. Must accept arguments n (nlgt) d (nz) return n x d matrix. Default: function(n, d) matrix(runif(n*d, -1, 1), n, d). standardize_Z Logical. Standardize generated Z matrix (mean 0, sd 1)? beta_func_type Character. Specifies functional form mapping Z systematic component beta (betabar_i). Ignored nz = 0. Options: \"linear\": Linear function betabar_i = Z_i %*% Delta. Requires Delta beta_func_args. \"step\": Step function based one Z variable. Requires cutoff, beta_1, beta_2, Z_index beta_func_args. \"friedman\": Friedman benchmark function (modified) based first 5 Z variables. Requires coef_index beta_func_args specify coefficient applies (others zero). \"custom\": user-defined function provided beta_func_args$func. beta_func_args List. Arguments needed chosen beta_func_type. Ignored nz = 0. \"linear\": list(Delta = matrix(runif(ncoef * nz), nrow=nz)). Delta nz x ncoef. \"step\": list(cutoff = 0, beta_1 = rep(-1, ncoef), beta_2 = rep(1, ncoef), Z_index = 1). beta_1/beta_2 vectors length ncoef. Z_index column Z use. \"friedman\": list(coef_index = 1). nz must >= 5. function applied betabar_i[coef_index], others 0. \"custom\": list(func = function(Zi) { ... }). function must take vector Zi (row Z) return vector betabar_i length ncoef. ncomp Integer. Number components normal mixture residual heterogeneity (eps_i). mixture_comps List. Optional pre-specified mixture components. list length ncomp, element list(mu = ..., rooti = ...). mu mean vector (length ncoef), rooti upper Cholesky factor inverse covariance matrix (ncoef x ncoef). NULL, components generated based sigma_inv_diag. sigma_inv_diag Numeric. Diagonal value inverse covariance matrix (precision) mixture components mixture_comps NULL. Assumes identity covariance scaled . Xa_dist_func Function. Function generate alternative-specific variables Xa. Takes n (nT), p, na (nXa) returns matrix (usually n x (p*na) similar structure expected createX). Default: function(n, p, na) matrix(runif(n*p*na, -1, 1), ncol=p*na). Xd_dist_func Function. Function generate choice-invariant variables Xd. Takes n (nT), nd (nXd) returns n x nd matrix. Default: function(n, nd) matrix(rnorm(n*nd), ncol=nd). seed Integer. Optional random seed reproducibility.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"list suitable direct use Data argument rhierMnlRwMixture, containing: p: Number alternatives. lgtdata: List length nlgt. element list(y=y_i, X=X_i, beta=beta_i, betabar=betabar_i). Z: nlgt x nz matrix individual-specific covariates (standardized requested). Additionally, list contains true_values: true_values$beta_true: nlgt x ncoef matrix true beta_i. true_values$betabar_true: nlgt x ncoef matrix true betabar_i = f(Z_i). true_values$true_params: List containing parameters used generation (beta_func_type, beta_func_args, mixture_comps, pvec). true_values$dimensions: List containing key dimensions used (p, nlgt, nT, nz, ncoef, etc.).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/sim_hier_mnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Hierarchical Multinomial Logit Data — sim_hier_mnl","text":"","code":"# Simple linear example sim_data_linear <- sim_hier_mnl(nlgt = 50, nT = 5, p = 3, nz = 2, nXa = 1, nXd = 0,                                beta_func_type = \"linear\", seed = 123) plot(sim_data_linear$Z[,1], sim_data_linear$true_values$betabar_true[,1]) # Visualize linear   # Step function example sim_data_step <- sim_hier_mnl(nlgt = 50, nT = 5, p = 3, nz = 2, nXa = 1, nXd = 0,                               beta_func_type = \"step\",                               beta_func_args = list(Z_index = 1),                               seed = 456) plot(sim_data_step$Z[,1], sim_data_step$true_values$betabar_true[,1]) # Visualize step"},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"wrapper around sim_hier_mnl (R/sim_hier_mnl.R) providing simpler control common DGPs using custom betabar function. Fixes p=3, nXa=1, nXd=1, const=TRUE, ncomp=1. Allows specifying target variances betabar_i (mean zero first coef) eps_i.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"","code":"simple_sim_hier_mnl(   nlgt,   nT,   nz,   het_observed = c(\"none\", \"linear\", \"step\", \"friedman\"),   target_var_betabar = 1,   target_var_eps = 0.5,   seed = NULL )"},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"nlgt Number individuals. nT Number observations per individual. nz Number Z variables. het_observed Character. Functional form observed heterogeneity (betabar_i = f(Z_i)). Options: \"none\", \"linear\", \"step\", \"friedman\". target_var_betabar Numeric. Target variance first coefficient observed component betabar_i = f(Z_i). Must non-negative. first coefficient centered mean zero. remaining coefficients (2 ncoef) fixed constants -1, 1, -1, 1. Ignored het_observed = \"none\". target_var_eps Numeric. Target variance coefficient unobserved component eps_i. Must non-negative. Controls sigma_inv_diag. seed Integer. Optional random seed.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"Output list sim_hier_mnl.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/simple_sim_hier_mnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Hierarchical MNL Data with Predefined Settings & Var Control — simple_sim_hier_mnl","text":"","code":"if (FALSE) { # \\dontrun{ # --- Simulate data with linear observed heterogeneity --- sim_lin <- simple_sim_hier_mnl(nlgt = 100, nT = 10, nz = 5,                                  het_observed = \"linear\",                                  target_var_betabar = 2.0,                                  target_var_eps = 0.5,                                  seed = 123)  # Check dimensions and structure print(names(sim_lin)) print(sim_lin$true_values$dimensions) print(str(sim_lin$lgtdata[[1]])) # Structure for one individual if (!is.null(sim_lin$Z)) print(dim(sim_lin$Z))  # Plot observed vs unobserved components for first coefficient beta_1 <- sim_lin$true_values$beta_true[, 1] betabar_1 <- sim_lin$true_values$betabar_true[, 1] eps_1 <- beta_1 - betabar_1  print(paste(\"Var(betabar_k1) =\", round(var(betabar_1), 2))) print(paste(\"Var(eps_k1) =\", round(var(eps_1), 2)))  # --- Simulate data with Friedman observed heterogeneity --- sim_fried <- simple_sim_hier_mnl(nlgt = 100, nT = 10, nz = 5,                                    het_observed = \"friedman\",                                    target_var_betabar = 1.5,                                    target_var_eps = 0.2,                                    seed = 456)  # Plot Z vs betabar for the first coefficient if (!is.null(sim_fried$Z) && ncol(sim_fried$Z) > 0) {   plot(sim_fried$Z[, 1], sim_fried$true_values$betabar_true[, 1],        xlab = \"Z1\", ylab = \"betabar_k1 (Friedman)\") }  # --- Simulate data with no observed heterogeneity --- sim_none <- simple_sim_hier_mnl(nlgt = 100, nT = 10, nz = 5,                                   het_observed = \"none\",                                   target_var_betabar = 0, # Should be ignored                                   target_var_eps = 1.0,                                   seed = 789)  # Check if betabar is zero print(all(sim_none$true_values$betabar_true == 0)) print(paste(\"Var(eps_k1) =\", round(var(sim_none$true_values$beta_true[, 1]), 2))) } # }"},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Marginal Effects Object — summary.marginal_effects","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"Computes posterior means quantiles draws stored marginal_effects object.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"","code":"# S3 method for class 'marginal_effects' summary(object, probs = c(0.025, 0.05, 0.5, 0.95, 0.975), ...)"},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"object object class \"marginal_effects\" created marginal_effects.rhierMnlRwMixture. probs Numeric vector quantile probabilities (0 1) compute. ... Additional arguments (currently ignored).","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"list object class \"summary.marginal_effects\" containing: summary_df data frame columns coefficient_index, columns non-NA column input z_values (e.g., z_col_1, z_col_2, ... using original variable names available), mean, columns requested quantile (e.g., q2.5, q50, q97.5). row represents specific coefficient specific grid point defined row z_values. z_values original z_values matrix provided marginal_effects. probs numeric vector quantile probabilities used. call matched call summary function.","code":""},{"path":"https://thomaswieman.com/bayesm.HART/reference/summary.marginal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Marginal Effects Object — summary.marginal_effects","text":"","code":"# --- Assumes `mfx_result` exists from marginal_effects.rhierMnlRwMixture example --- if (exists(\"mfx_result\")) {   mfx_summary <- summary(mfx_result, probs = c(0.05, 0.5, 0.95))   print(mfx_summary$summary_df)   # --- Plotting example follows in plot.summary.marginal_effects ---  } else {   message(\"Run the example for 'marginal_effects.rhierMnlRwMixture' first.\") } #> Run the example for 'marginal_effects.rhierMnlRwMixture' first."}]
